[1;31m
Start test 1[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /readFile booleans.txt
Data imported: 1500000
Perform action:
> /size
Amount of elements: 1500000
Perform action:
> /count false
Amount of false: 750000
Perform action:
> /readFile booleans.txt
Data imported: 1500000
Perform action:
> /size
Amount of elements: 3000000
Perform action:
> /count false
Amount of false: 1500000
Perform action:
> /readFile booleans.txt
Data imported: 1500000
Perform action:
> /size
Amount of elements: 4500000
Perform action:
> /count false
Amount of false: 2250000
Perform action:
> /readFile booleans.txt
Data imported: 1500000
Perform action:
> /size
Amount of elements: 6000000
Perform action:
> /count false
Amount of false: 3000000
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /readFile numbers.txt
Data imported: 1500000
Perform action:
> /size
Amount of elements: 1500000
Perform action:
> /count 2147483647
Amount of 2147483647: 1500000
Perform action:
> /readFile numbers.txt
Data imported: 1500000
Perform action:
> /size
Amount of elements: 3000000
Perform action:
> /count 2147483647
Amount of 2147483647: 3000000
Perform action:
> /readFile numbers.txt
Data imported: 1500000
Perform action:
> /size
Amount of elements: 4500000
Perform action:
> /count 2147483647
Amount of 2147483647: 4500000
Perform action:
> /readFile numbers.txt
Data imported: 1500000
Perform action:
> /size
Amount of elements: 6000000
Perform action:
> /count 2147483647
Amount of 2147483647: 6000000
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /readFile words.txt
Data imported: 1500000
Perform action:
> /size
Amount of elements: 1500000
Perform action:
> /count CakeIsALie
Amount of CakeIsALie: 1500000
Perform action:
> /readFile words.txt
Data imported: 1500000
Perform action:
> /size
Amount of elements: 3000000
Perform action:
> /count CakeIsALie
Amount of CakeIsALie: 3000000
Perform action:
> /readFile words.txt
Data imported: 1500000
Perform action:
> /size
Amount of elements: 4500000
Perform action:
> /count CakeIsALie
Amount of CakeIsALie: 4500000
Perform action:
> /readFile words.txt
Data imported: 1500000
Perform action:
> /size
Amount of elements: 6000000
Perform action:
> /count CakeIsALie
Amount of CakeIsALie: 6000000
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 0
[1;31m
Start test 1 (2)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 0
[1;31m
Start test 2 (3)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
[1;31m
Start test 3 (4)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
[1;31m
Start test 4 (5)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
[1;31m
Start test 5 (6)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Boolean-specific commands:
t===================================================================================================================
1/flip [<int> INDEX] - Flip the specified boolean
//negateAll - Negate all the booleans in memory
]/and [<int> INDEX1] [<int> INDEX2] - Calculate the bitwise AND of the two specified elements
[/or [<int> INDEX1] [<int> INDEX2] - Calculate the bitwise OR of the two specified elements
^/logShift [<int> NUM] - Perform a logical shift of elements in memory by the specified amount
_/convertTo [string/number] - Convert the boolean(bit) sequence in memory to the specified type
9/morse - Convert the boolean(bit) sequence to Morse code
u===================================================================================================================
Perform action:
> /add true
Element true added
Perform action:
> /writeFile data.txt
Data exported: 1
Perform action:
> /readFile data.txt
Data imported: 1
Perform action:
> /size
Amount of elements: 2
Perform action:
> /frequency
Frequency:
	true: 2
Perform action:
> /print 0
Element on 0 position is true
Perform action:
> /printAll asList
List of elements:
[true, true]
Perform action:
> /getRandom
Random element: true
Perform action:
> /equals 0 1
(0 and 1 elements are equal: true = true
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /index true
+First occurrence of true is on 0 position
Perform action:
> /count true
Amount of true: 2
Perform action:
> /compare 0 1
Result: true = true
Perform action:

> /mirror
Data reversed
Perform action:

> /unique
Unique values: [true]
Perform action:

> /flip 0
Element on 0 position flipped
Perform action:
> /negateAll
All elements negated
Perform action:
> /and 0 1
.Operation performed: (true && false) is false
Perform action:

> /or 0 1
-Operation performed: (true || false) is true
Perform action:
> /logShift 0
Elements shifted by 0
Perform action:
> /convertTo number
Converted: 2
Perform action:
	> /morse
Morse code: ._
Perform action:
> /replace 0 true
*Element on 0 position replaced with true
Perform action:
> /replaceAll true true
&Each true element replaced with true
Perform action:
> /remove 0
Element on 0 position removed
Perform action:
	> /clear
Data cleared
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 0
[1;31m
Start test 6 (7)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Number-specific commands:
t===================================================================================================================
U/sum [<int> INDEX1] [<int> INDEX2] - Calculate the sum of the two specified elements
f/subtract [<int> INDEX1] [<int> INDEX2] - Calculate the difference between the two specified elements
^/multiply [<int> INDEX1] [<int> INDEX2] - Calculate the product of the two specified elements
]/divide [<int> INDEX1] [<int> INDEX2] - Calculate the division of the two specified elements
t/pow [<int> INDEX1] [<int> INDEX2] - Calculate the power of the specified element to the specified exponent element
L/factorial [<int> INDEX] - Calculate the factorial of the specified element
,/sumAll - Calculate the sum of all elements
1/average - Calculate the average of all elements
u===================================================================================================================
Perform action:
	> /add 1
Element 1 added
Perform action:
> /writeFile data.txt
Data exported: 1
Perform action:
> /readFile data.txt
Data imported: 1
Perform action:
> /size
Amount of elements: 2
Perform action:
> /frequency
Frequency:
1: 2
Perform action:
> /print 0
Element on 0 position is 1
Perform action:
> /printAll asList
List of elements:
[1, 1]
Perform action:
> /getRandom
Random element: 1
Perform action:
> /equals 0 1
"0 and 1 elements are equal: 1 = 1
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /index 1
(First occurrence of 1 is on 0 position
Perform action:
> /count 1
Amount of 1: 2
Perform action:
> /compare 0 1
Result: 1 = 1
Perform action:

> /mirror
Data reversed
Perform action:

> /unique
Unique values: [1]
Perform action:
> /sum 0 1
!Calculation performed: 1 + 1 = 2
Perform action:
> /subtract 0 1
!Calculation performed: 1 - 1 = 0
Perform action:
> /multiply 0 1
!Calculation performed: 1 * 1 = 1
Perform action:
> /divide 0 1
(Calculation performed: 1 / 1 = 1.000000
Perform action:
> /pow 0 1
!Calculation performed: 1 ^ 1 = 1
Perform action:
> /factorial 0
Calculation performed: 1! = 1
Perform action:

> /sumAll
Sum of all elements: 2
Perform action:
> /average
Average of all elements: 1
Perform action:
> /replace 0 1
'Element on 0 position replaced with 1
Perform action:
> /replaceAll 1 1
 Each 1 element replaced with 1
Perform action:
> /remove 0
Element on 0 position removed
Perform action:
	> /clear
Data cleared
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 0
[1;31m
Start test 7 (8)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Word-specific commands:
t===================================================================================================================
H/concat [<int> INDEX1] [<int> INDEX2] Concatenate two specified strings
L/swapCase [<int> INDEX] Output swapped case version of the specified string
F/upper [<int> INDEX] Output uppercase version of the specified string
F/lower [<int> INDEX] Output lowercase version of the specified string
G/reverse [<int> INDEX] Output reversed version of the specified string
=/length [<int> INDEX] Get the length of the specified string
M/join [<string> DELIMITER] Join all the strings with the specified delimiter
f/regex [<string> PATTERN] Search for all elements that match the specified regular expression pattern
u===================================================================================================================
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /writeFile data.txt
Data exported: 1
Perform action:
> /readFile data.txt
Data imported: 1
Perform action:
> /size
Amount of elements: 2
Perform action:
> /frequency
Frequency:
CakeIsALie: 2
Perform action:
> /print 0
%Element on 0 position is CakeIsALie
Perform action:
> /printAll asList
List of elements:
[CakeIsALie, CakeIsALie]
Perform action:
> /getRandom
Random element: CakeIsALie
Perform action:
> /equals 0 1
40 and 1 elements are equal: CakeIsALie = CakeIsALie
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /index CakeIsALie
1First occurrence of CakeIsALie is on 0 position
Perform action:
> /count CakeIsALie
Amount of CakeIsALie: 2
Perform action:
> /compare 0 1
!Result: CakeIsALie = CakeIsALie
Perform action:

> /mirror
Data reversed
Perform action:

> /unique
Unique values: [CakeIsALie]
Perform action:
> /concat 0 1
+Concatenated string: CakeIsALieCakeIsALie
Perform action:
> /swapCase 0
3"CakeIsALie" string with swapped case: cAKEiSalIE
Perform action:
> /upper 0
*Uppercase "CakeIsALie" string: CAKEISALIE
Perform action:
> /lower 0
*Lowercase "CakeIsALie" string: cakeisalie
Perform action:
> /reverse 0
)Reversed "CakeIsALie" string: eiLAsIekaC
Perform action:
> /length 0
"Length of "CakeIsALie" string: 10
Perform action:

> /join _
%Joined string: CakeIsALie_CakeIsALie
Perform action:
> /regex .+
$Strings that match provided regex:
[CakeIsALie, CakeIsALie]
Perform action:
> /replace 0 CakeIsALie
0Element on 0 position replaced with CakeIsALie
Perform action:
$> /replaceAll CakeIsALie CakeIsALie
2Each CakeIsALie element replaced with CakeIsALie
Perform action:
> /remove 0
Element on 0 position removed
Perform action:
	> /clear
Data cleared
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 0
[1;31m
Start test 8 (9)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Boolean-specific commands:
t===================================================================================================================
1/flip [<int> INDEX] - Flip the specified boolean
//negateAll - Negate all the booleans in memory
]/and [<int> INDEX1] [<int> INDEX2] - Calculate the bitwise AND of the two specified elements
[/or [<int> INDEX1] [<int> INDEX2] - Calculate the bitwise OR of the two specified elements
^/logShift [<int> NUM] - Perform a logical shift of elements in memory by the specified amount
_/convertTo [string/number] - Convert the boolean(bit) sequence in memory to the specified type
9/morse - Convert the boolean(bit) sequence to Morse code
u===================================================================================================================
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Boolean-specific commands:
t===================================================================================================================
1/flip [<int> INDEX] - Flip the specified boolean
//negateAll - Negate all the booleans in memory
]/and [<int> INDEX1] [<int> INDEX2] - Calculate the bitwise AND of the two specified elements
[/or [<int> INDEX1] [<int> INDEX2] - Calculate the bitwise OR of the two specified elements
^/logShift [<int> NUM] - Perform a logical shift of elements in memory by the specified amount
_/convertTo [string/number] - Convert the boolean(bit) sequence in memory to the specified type
9/morse - Convert the boolean(bit) sequence to Morse code
u===================================================================================================================
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Number-specific commands:
t===================================================================================================================
U/sum [<int> INDEX1] [<int> INDEX2] - Calculate the sum of the two specified elements
f/subtract [<int> INDEX1] [<int> INDEX2] - Calculate the difference between the two specified elements
^/multiply [<int> INDEX1] [<int> INDEX2] - Calculate the product of the two specified elements
]/divide [<int> INDEX1] [<int> INDEX2] - Calculate the division of the two specified elements
t/pow [<int> INDEX1] [<int> INDEX2] - Calculate the power of the specified element to the specified exponent element
L/factorial [<int> INDEX] - Calculate the factorial of the specified element
,/sumAll - Calculate the sum of all elements
1/average - Calculate the average of all elements
u===================================================================================================================
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Word-specific commands:
t===================================================================================================================
H/concat [<int> INDEX1] [<int> INDEX2] Concatenate two specified strings
L/swapCase [<int> INDEX] Output swapped case version of the specified string
F/upper [<int> INDEX] Output uppercase version of the specified string
F/lower [<int> INDEX] Output lowercase version of the specified string
G/reverse [<int> INDEX] Output reversed version of the specified string
=/length [<int> INDEX] Get the length of the specified string
M/join [<string> DELIMITER] Join all the strings with the specified delimiter
f/regex [<string> PATTERN] Search for all elements that match the specified regular expression pattern
u===================================================================================================================
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 0
[1;31m
Start test 9 (10)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Number-specific commands:
t===================================================================================================================
U/sum [<int> INDEX1] [<int> INDEX2] - Calculate the sum of the two specified elements
f/subtract [<int> INDEX1] [<int> INDEX2] - Calculate the difference between the two specified elements
^/multiply [<int> INDEX1] [<int> INDEX2] - Calculate the product of the two specified elements
]/divide [<int> INDEX1] [<int> INDEX2] - Calculate the division of the two specified elements
t/pow [<int> INDEX1] [<int> INDEX2] - Calculate the power of the specified element to the specified exponent element
L/factorial [<int> INDEX] - Calculate the factorial of the specified element
,/sumAll - Calculate the sum of all elements
1/average - Calculate the average of all elements
u===================================================================================================================
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Boolean-specific commands:
t===================================================================================================================
1/flip [<int> INDEX] - Flip the specified boolean
//negateAll - Negate all the booleans in memory
]/and [<int> INDEX1] [<int> INDEX2] - Calculate the bitwise AND of the two specified elements
[/or [<int> INDEX1] [<int> INDEX2] - Calculate the bitwise OR of the two specified elements
^/logShift [<int> NUM] - Perform a logical shift of elements in memory by the specified amount
_/convertTo [string/number] - Convert the boolean(bit) sequence in memory to the specified type
9/morse - Convert the boolean(bit) sequence to Morse code
u===================================================================================================================
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Number-specific commands:
t===================================================================================================================
U/sum [<int> INDEX1] [<int> INDEX2] - Calculate the sum of the two specified elements
f/subtract [<int> INDEX1] [<int> INDEX2] - Calculate the difference between the two specified elements
^/multiply [<int> INDEX1] [<int> INDEX2] - Calculate the product of the two specified elements
]/divide [<int> INDEX1] [<int> INDEX2] - Calculate the division of the two specified elements
t/pow [<int> INDEX1] [<int> INDEX2] - Calculate the power of the specified element to the specified exponent element
L/factorial [<int> INDEX] - Calculate the factorial of the specified element
,/sumAll - Calculate the sum of all elements
1/average - Calculate the average of all elements
u===================================================================================================================
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Word-specific commands:
t===================================================================================================================
H/concat [<int> INDEX1] [<int> INDEX2] Concatenate two specified strings
L/swapCase [<int> INDEX] Output swapped case version of the specified string
F/upper [<int> INDEX] Output uppercase version of the specified string
F/lower [<int> INDEX] Output lowercase version of the specified string
G/reverse [<int> INDEX] Output reversed version of the specified string
=/length [<int> INDEX] Get the length of the specified string
M/join [<string> DELIMITER] Join all the strings with the specified delimiter
f/regex [<string> PATTERN] Search for all elements that match the specified regular expression pattern
u===================================================================================================================
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 0
[1;31m
Start test 10 (11)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Word-specific commands:
t===================================================================================================================
H/concat [<int> INDEX1] [<int> INDEX2] Concatenate two specified strings
L/swapCase [<int> INDEX] Output swapped case version of the specified string
F/upper [<int> INDEX] Output uppercase version of the specified string
F/lower [<int> INDEX] Output lowercase version of the specified string
G/reverse [<int> INDEX] Output reversed version of the specified string
=/length [<int> INDEX] Get the length of the specified string
M/join [<string> DELIMITER] Join all the strings with the specified delimiter
f/regex [<string> PATTERN] Search for all elements that match the specified regular expression pattern
u===================================================================================================================
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Boolean-specific commands:
t===================================================================================================================
1/flip [<int> INDEX] - Flip the specified boolean
//negateAll - Negate all the booleans in memory
]/and [<int> INDEX1] [<int> INDEX2] - Calculate the bitwise AND of the two specified elements
[/or [<int> INDEX1] [<int> INDEX2] - Calculate the bitwise OR of the two specified elements
^/logShift [<int> NUM] - Perform a logical shift of elements in memory by the specified amount
_/convertTo [string/number] - Convert the boolean(bit) sequence in memory to the specified type
9/morse - Convert the boolean(bit) sequence to Morse code
u===================================================================================================================
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Number-specific commands:
t===================================================================================================================
U/sum [<int> INDEX1] [<int> INDEX2] - Calculate the sum of the two specified elements
f/subtract [<int> INDEX1] [<int> INDEX2] - Calculate the difference between the two specified elements
^/multiply [<int> INDEX1] [<int> INDEX2] - Calculate the product of the two specified elements
]/divide [<int> INDEX1] [<int> INDEX2] - Calculate the division of the two specified elements
t/pow [<int> INDEX1] [<int> INDEX2] - Calculate the power of the specified element to the specified exponent element
L/factorial [<int> INDEX] - Calculate the factorial of the specified element
,/sumAll - Calculate the sum of all elements
1/average - Calculate the average of all elements
u===================================================================================================================
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /help
t===================================================================================================================
#Usage: COMMAND [<TYPE> PARAMETERS]
t===================================================================================================================
General commands:
t===================================================================================================================
"/help - Display this help message
/menu - Return to the menu

;/add [<T> ELEMENT] - Add the specified element to the list
P/remove [<int> INDEX] - Remove the element at the specified index from the list
_/replace [<int> INDEX] [<T> ELEMENT] - Replace the element at specified index with the new one
`/replaceAll [<T> OLD] [<T> NEW] - Replace all occurrences of specified element with the new one

P/index [<T> ELEMENT] - Get the index of the first specified element in the list
N/sort [ascending/descending] - Sort the list in ascending or descending order
=/frequency - The frequency count of each element in the list
L/print [<int> INDEX] - Print the element at the specified index in the list
[/printAll [asList/lineByLine/oneLine] - Print all elements in the list in specified format
0/getRandom - Get a random element from the list
\/count [<T> ELEMENT] - Count the number of occurrences of the specified element in the list
//size - Get the number of elements in the list
H/equals [<int> INDEX1] [<int> INDEX2] - Check if two elements are equal
+/clear - Remove all elements from the list
]/compare [<int> INDEX1] [<int> INDEX2] Compare elements at the specified indices in the list
-/mirror - Mirror elements' positions in list
&/unique - Unique elements in the list
[/readFile [<string> FILENAME] - Import data from the specified file and add it to the list
M/writeFile [<string> FILENAME] - Export the list data to the specified file
t===================================================================================================================
Word-specific commands:
t===================================================================================================================
H/concat [<int> INDEX1] [<int> INDEX2] Concatenate two specified strings
L/swapCase [<int> INDEX] Output swapped case version of the specified string
F/upper [<int> INDEX] Output uppercase version of the specified string
F/lower [<int> INDEX] Output lowercase version of the specified string
G/reverse [<int> INDEX] Output reversed version of the specified string
=/length [<int> INDEX] Get the length of the specified string
M/join [<string> DELIMITER] Join all the strings with the specified delimiter
f/regex [<string> PATTERN] Search for all elements that match the specified regular expression pattern
u===================================================================================================================
Perform action:
> /menu
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 0
[1;31m
Start test 11 (12)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /printAll oneLine
List of elements:
true
Perform action:
> /add false
Element false added
Perform action:
> /printAll oneLine
List of elements:
true false
Perform action:
> /add false
Element false added
Perform action:
> /printAll oneLine
List of elements:
true false false
Perform action:
> /add true
Element true added
Perform action:
> /printAll oneLine
List of elements:
true false false true
Perform action:
[1;31m
Start test 12 (13)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:
> /printAll oneLine
List of elements:
2
Perform action:

> /add -1
Element -1 added
Perform action:
> /printAll oneLine
List of elements:
2 -1
Perform action:

> /add -1
Element -1 added
Perform action:
> /printAll oneLine
List of elements:
	2 -1 -1
Perform action:
	> /add 2
Element 2 added
Perform action:
> /printAll oneLine
List of elements:
2 -1 -1 2
Perform action:
[1;31m
Start test 13 (14)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /printAll oneLine
List of elements:
CakeIsALie
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /printAll oneLine
List of elements:
CakeIsALie CakeIsATruth
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /printAll oneLine
List of elements:
&CakeIsALie CakeIsATruth CakeIsATruth
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /printAll oneLine
List of elements:
1CakeIsALie CakeIsATruth CakeIsATruth CakeIsALie
Perform action:
[1;31m
Start test 14 (15)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /print 0
Element on 0 position is true
Perform action:
> /print 1
 Element on 1 position is false
Perform action:
> /print 2
 Element on 2 position is false
Perform action:
> /print 3
Element on 3 position is true
Perform action:
[1;31m
Start test 15 (16)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /print 0
Element on 0 position is 2
Perform action:
> /print 1
Element on 1 position is -1
Perform action:
> /print 2
Element on 2 position is -1
Perform action:
> /print 3
Element on 3 position is 2
Perform action:
[1;31m
Start test 16 (17)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /print 0
%Element on 0 position is CakeIsALie
Perform action:
> /print 1
'Element on 1 position is CakeIsATruth
Perform action:
> /print 2
'Element on 2 position is CakeIsATruth
Perform action:
> /print 3
%Element on 3 position is CakeIsALie
Perform action:
[1;31m
Start test 17 (18)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /remove 3
Element on 3 position removed
Perform action:
> /printAll oneLine
List of elements:
true false false
Perform action:
> /remove 2
Element on 2 position removed
Perform action:
> /printAll oneLine
List of elements:
true false
Perform action:
> /remove 1
Element on 1 position removed
Perform action:
> /printAll oneLine
List of elements:
true
Perform action:
> /remove 0
Element on 0 position removed
Perform action:
> /printAll oneLine
List of elements:

Perform action:
[1;31m
Start test 18 (19)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /remove 3
Element on 3 position removed
Perform action:
> /printAll oneLine
List of elements:
	2 -1 -1
Perform action:
> /remove 2
Element on 2 position removed
Perform action:
> /printAll oneLine
List of elements:
2 -1
Perform action:
> /remove 1
Element on 1 position removed
Perform action:
> /printAll oneLine
List of elements:
2
Perform action:
> /remove 0
Element on 0 position removed
Perform action:
> /printAll oneLine
List of elements:

Perform action:
[1;31m
Start test 19 (20)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /remove 3
Element on 3 position removed
Perform action:
> /printAll oneLine
List of elements:
&CakeIsALie CakeIsATruth CakeIsATruth
Perform action:
> /remove 2
Element on 2 position removed
Perform action:
> /printAll oneLine
List of elements:
CakeIsALie CakeIsATruth
Perform action:
> /remove 1
Element on 1 position removed
Perform action:
> /printAll oneLine
List of elements:
CakeIsALie
Perform action:
> /remove 0
Element on 0 position removed
Perform action:
> /printAll oneLine
List of elements:

Perform action:
[1;31m
Start test 20 (21)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /replace 3 false
+Element on 3 position replaced with false
Perform action:
> /printAll oneLine
List of elements:
true false false false
Perform action:
> /replace 2 false
+Element on 2 position replaced with false
Perform action:
> /printAll oneLine
List of elements:
true false false false
Perform action:
> /replace 1 false
+Element on 1 position replaced with false
Perform action:
> /printAll oneLine
List of elements:
true false false false
Perform action:
> /replace 0 false
+Element on 0 position replaced with false
Perform action:
> /printAll oneLine
List of elements:
false false false false
Perform action:
[1;31m
Start test 21 (22)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /replace 3 42
(Element on 3 position replaced with 42
Perform action:
> /printAll oneLine
List of elements:
2 -1 -1 42
Perform action:
> /replace 2 42
(Element on 2 position replaced with 42
Perform action:
> /printAll oneLine
List of elements:
2 -1 42 42
Perform action:
> /replace 1 42
(Element on 1 position replaced with 42
Perform action:
> /printAll oneLine
List of elements:
2 42 42 42
Perform action:
> /replace 0 42
(Element on 0 position replaced with 42
Perform action:
> /printAll oneLine
List of elements:
42 42 42 42
Perform action:
[1;31m
Start test 22 (23)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /replace 3 tmp
)Element on 3 position replaced with tmp
Perform action:
> /printAll oneLine
List of elements:
*CakeIsALie CakeIsATruth CakeIsATruth tmp
Perform action:
> /replace 2 tmp
)Element on 2 position replaced with tmp
Perform action:
> /printAll oneLine
List of elements:
!CakeIsALie CakeIsATruth tmp tmp
Perform action:
> /replace 1 tmp
)Element on 1 position replaced with tmp
Perform action:
> /printAll oneLine
List of elements:
CakeIsALie tmp tmp tmp
Perform action:
> /replace 0 tmp
)Element on 0 position replaced with tmp
Perform action:
> /printAll oneLine
List of elements:
tmp tmp tmp tmp
Perform action:
[1;31m
Start test 23 (24)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /replaceAll true false
'Each true element replaced with false
Perform action:
> /printAll oneLine
List of elements:
false false false false
Perform action:
[1;31m
Start test 24 (25)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /replaceAll 2 42
!Each 2 element replaced with 42
Perform action:
> /printAll oneLine
List of elements:
42 -1 -1 42
Perform action:
[1;31m
Start test 25 (26)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /replaceAll CakeIsALie tmp
+Each CakeIsALie element replaced with tmp
Perform action:
> /printAll oneLine
List of elements:
#tmp CakeIsATruth CakeIsATruth tmp
Perform action:
[1;31m
Start test 26 (27)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /index true
+First occurrence of true is on 0 position
Perform action:
> /index false
,First occurrence of false is on 1 position
Perform action:
> /index false
,First occurrence of false is on 1 position
Perform action:
> /index true
+First occurrence of true is on 0 position
Perform action:
[1;31m
Start test 27 (28)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /index 2
(First occurrence of 2 is on 0 position
Perform action:
> /index -1
)First occurrence of -1 is on 1 position
Perform action:
> /index -1
)First occurrence of -1 is on 1 position
Perform action:
> /index 2
(First occurrence of 2 is on 0 position
Perform action:
[1;31m
Start test 28 (29)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /index CakeIsALie
1First occurrence of CakeIsALie is on 0 position
Perform action:
> /index CakeIsATruth
3First occurrence of CakeIsATruth is on 1 position
Perform action:
> /index CakeIsATruth
3First occurrence of CakeIsATruth is on 1 position
Perform action:
> /index CakeIsALie
1First occurrence of CakeIsALie is on 0 position
Perform action:
[1;31m
Start test 29 (30)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /printAll oneLine
List of elements:
false false true true
Perform action:
[1;31m
Start test 30 (31)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /printAll oneLine
List of elements:
-1 -1 2 2
Perform action:
[1;31m
Start test 31 (32)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /printAll oneLine
List of elements:
1CakeIsALie CakeIsALie CakeIsATruth CakeIsATruth
Perform action:
[1;31m
Start test 32 (33)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /frequency
Frequency:

false: 2
	true: 2
Perform action:
[1;31m
Start test 33 (34)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /frequency
Frequency:
-1: 2
2: 2
Perform action:
[1;31m
Start test 34 (35)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /frequency
Frequency:
CakeIsATruth: 2
CakeIsALie: 2
Perform action:
[1;31m
Start test 35 (36)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /count true
Amount of true: 2
Perform action:
> /count false
Amount of false: 2
Perform action:
> /count false
Amount of false: 2
Perform action:
> /count true
Amount of true: 2
Perform action:
[1;31m
Start test 36 (37)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /count 2
Amount of 2: 2
Perform action:
> /count -1
Amount of -1: 2
Perform action:
> /count -1
Amount of -1: 2
Perform action:
> /count 2
Amount of 2: 2
Perform action:
[1;31m
Start test 37 (38)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /count CakeIsALie
Amount of CakeIsALie: 2
Perform action:
> /count CakeIsATruth
Amount of CakeIsATruth: 2
Perform action:
> /count CakeIsATruth
Amount of CakeIsATruth: 2
Perform action:
> /count CakeIsALie
Amount of CakeIsALie: 2
Perform action:
[1;31m
Start test 38 (39)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /size
Amount of elements: 4
Perform action:
[1;31m
Start test 39 (40)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /size
Amount of elements: 4
Perform action:
[1;31m
Start test 40 (41)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /size
Amount of elements: 4
Perform action:
[1;31m
Start test 41 (42)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /equals 0 0
(0 and 0 elements are equal: true = true
Perform action:
> /equals 0 1
.0 and 1 elements are not equal: true != false
Perform action:
> /equals 0 2
.0 and 2 elements are not equal: true != false
Perform action:
> /equals 0 3
(0 and 3 elements are equal: true = true
Perform action:
> /equals 1 0
.1 and 0 elements are not equal: false != true
Perform action:
> /equals 1 1
*1 and 1 elements are equal: false = false
Perform action:
> /equals 1 2
*1 and 2 elements are equal: false = false
Perform action:
> /equals 1 3
.1 and 3 elements are not equal: false != true
Perform action:
> /equals 2 0
.2 and 0 elements are not equal: false != true
Perform action:
> /equals 2 1
*2 and 1 elements are equal: false = false
Perform action:
> /equals 2 2
*2 and 2 elements are equal: false = false
Perform action:
> /equals 2 3
.2 and 3 elements are not equal: false != true
Perform action:
> /equals 3 0
(3 and 0 elements are equal: true = true
Perform action:
> /equals 3 1
.3 and 1 elements are not equal: true != false
Perform action:
> /equals 3 2
.3 and 2 elements are not equal: true != false
Perform action:
> /equals 3 3
(3 and 3 elements are equal: true = true
Perform action:
[1;31m
Start test 42 (43)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /equals 0 0
"0 and 0 elements are equal: 2 = 2
Perform action:
> /equals 0 1
(0 and 1 elements are not equal: 2 != -1
Perform action:
> /equals 0 2
(0 and 2 elements are not equal: 2 != -1
Perform action:
> /equals 0 3
"0 and 3 elements are equal: 2 = 2
Perform action:
> /equals 1 0
(1 and 0 elements are not equal: -1 != 2
Perform action:
> /equals 1 1
$1 and 1 elements are equal: -1 = -1
Perform action:
> /equals 1 2
$1 and 2 elements are equal: -1 = -1
Perform action:
> /equals 1 3
(1 and 3 elements are not equal: -1 != 2
Perform action:
> /equals 2 0
(2 and 0 elements are not equal: -1 != 2
Perform action:
> /equals 2 1
$2 and 1 elements are equal: -1 = -1
Perform action:
> /equals 2 2
$2 and 2 elements are equal: -1 = -1
Perform action:
> /equals 2 3
(2 and 3 elements are not equal: -1 != 2
Perform action:
> /equals 3 0
"3 and 0 elements are equal: 2 = 2
Perform action:
> /equals 3 1
(3 and 1 elements are not equal: 2 != -1
Perform action:
> /equals 3 2
(3 and 2 elements are not equal: 2 != -1
Perform action:
> /equals 3 3
"3 and 3 elements are equal: 2 = 2
Perform action:
[1;31m
Start test 43 (44)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /equals 0 0
40 and 0 elements are equal: CakeIsALie = CakeIsALie
Perform action:
> /equals 0 1
;0 and 1 elements are not equal: CakeIsALie != CakeIsATruth
Perform action:
> /equals 0 2
;0 and 2 elements are not equal: CakeIsALie != CakeIsATruth
Perform action:
> /equals 0 3
40 and 3 elements are equal: CakeIsALie = CakeIsALie
Perform action:
> /equals 1 0
;1 and 0 elements are not equal: CakeIsATruth != CakeIsALie
Perform action:
> /equals 1 1
81 and 1 elements are equal: CakeIsATruth = CakeIsATruth
Perform action:
> /equals 1 2
81 and 2 elements are equal: CakeIsATruth = CakeIsATruth
Perform action:
> /equals 1 3
;1 and 3 elements are not equal: CakeIsATruth != CakeIsALie
Perform action:
> /equals 2 0
;2 and 0 elements are not equal: CakeIsATruth != CakeIsALie
Perform action:
> /equals 2 1
82 and 1 elements are equal: CakeIsATruth = CakeIsATruth
Perform action:
> /equals 2 2
82 and 2 elements are equal: CakeIsATruth = CakeIsATruth
Perform action:
> /equals 2 3
;2 and 3 elements are not equal: CakeIsATruth != CakeIsALie
Perform action:
> /equals 3 0
43 and 0 elements are equal: CakeIsALie = CakeIsALie
Perform action:
> /equals 3 1
;3 and 1 elements are not equal: CakeIsALie != CakeIsATruth
Perform action:
> /equals 3 2
;3 and 2 elements are not equal: CakeIsALie != CakeIsATruth
Perform action:
> /equals 3 3
43 and 3 elements are equal: CakeIsALie = CakeIsALie
Perform action:
[1;31m
Start test 44 (45)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
	> /clear
Data cleared
Perform action:
> /printAll oneLine
List of elements:

Perform action:
[1;31m
Start test 45 (46)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
	> /clear
Data cleared
Perform action:
> /printAll oneLine
List of elements:

Perform action:
[1;31m
Start test 46 (47)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
	> /clear
Data cleared
Perform action:
> /printAll oneLine
List of elements:

Perform action:
[1;31m
Start test 47 (48)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /compare 0 0
Result: true = true
Perform action:
> /compare 0 1
Result: true > false
Perform action:
> /compare 0 2
Result: true > false
Perform action:
> /compare 0 3
Result: true = true
Perform action:
> /compare 1 0
Result: false < true
Perform action:
> /compare 1 1
Result: false = false
Perform action:
> /compare 1 2
Result: false = false
Perform action:
> /compare 1 3
Result: false < true
Perform action:
> /compare 2 0
Result: false < true
Perform action:
> /compare 2 1
Result: false = false
Perform action:
> /compare 2 2
Result: false = false
Perform action:
> /compare 2 3
Result: false < true
Perform action:
> /compare 3 0
Result: true = true
Perform action:
> /compare 3 1
Result: true > false
Perform action:
> /compare 3 2
Result: true > false
Perform action:
> /compare 3 3
Result: true = true
Perform action:
[1;31m
Start test 48 (49)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /compare 0 0
Result: 2 = 2
Perform action:
> /compare 0 1
Result: 2 > -1
Perform action:
> /compare 0 2
Result: 2 > -1
Perform action:
> /compare 0 3
Result: 2 = 2
Perform action:
> /compare 1 0
Result: -1 < 2
Perform action:
> /compare 1 1
Result: -1 = -1
Perform action:
> /compare 1 2
Result: -1 = -1
Perform action:
> /compare 1 3
Result: -1 < 2
Perform action:
> /compare 2 0
Result: -1 < 2
Perform action:
> /compare 2 1
Result: -1 = -1
Perform action:
> /compare 2 2
Result: -1 = -1
Perform action:
> /compare 2 3
Result: -1 < 2
Perform action:
> /compare 3 0
Result: 2 = 2
Perform action:
> /compare 3 1
Result: 2 > -1
Perform action:
> /compare 3 2
Result: 2 > -1
Perform action:
> /compare 3 3
Result: 2 = 2
Perform action:
[1;31m
Start test 49 (50)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /compare 0 0
!Result: CakeIsALie = CakeIsALie
Perform action:
> /compare 0 1
#Result: CakeIsALie < CakeIsATruth
Perform action:
> /compare 0 2
#Result: CakeIsALie < CakeIsATruth
Perform action:
> /compare 0 3
!Result: CakeIsALie = CakeIsALie
Perform action:
> /compare 1 0
#Result: CakeIsATruth > CakeIsALie
Perform action:
> /compare 1 1
%Result: CakeIsATruth = CakeIsATruth
Perform action:
> /compare 1 2
%Result: CakeIsATruth = CakeIsATruth
Perform action:
> /compare 1 3
#Result: CakeIsATruth > CakeIsALie
Perform action:
> /compare 2 0
#Result: CakeIsATruth > CakeIsALie
Perform action:
> /compare 2 1
%Result: CakeIsATruth = CakeIsATruth
Perform action:
> /compare 2 2
%Result: CakeIsATruth = CakeIsATruth
Perform action:
> /compare 2 3
#Result: CakeIsATruth > CakeIsALie
Perform action:
> /compare 3 0
!Result: CakeIsALie = CakeIsALie
Perform action:
> /compare 3 1
#Result: CakeIsALie < CakeIsATruth
Perform action:
> /compare 3 2
#Result: CakeIsALie < CakeIsATruth
Perform action:
> /compare 3 3
!Result: CakeIsALie = CakeIsALie
Perform action:
[1;31m
Start test 50 (51)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:

> /mirror
Data reversed
Perform action:
> /printAll oneLine
List of elements:
true false false true
Perform action:
[1;31m
Start test 51 (52)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:

> /mirror
Data reversed
Perform action:
> /printAll oneLine
List of elements:
2 -1 -1 2
Perform action:
[1;31m
Start test 52 (53)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:

> /mirror
Data reversed
Perform action:
> /printAll oneLine
List of elements:
1CakeIsALie CakeIsATruth CakeIsATruth CakeIsALie
Perform action:
[1;31m
Start test 53 (54)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:

> /unique
Unique values: [false, true]
Perform action:
[1;31m
Start test 54 (55)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:

> /unique
Unique values: [-1, 2]
Perform action:
[1;31m
Start test 55 (56)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:

> /unique
+Unique values: [CakeIsATruth, CakeIsALie]
Perform action:
[1;31m
Start test 56 (57)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /readFile booleans.txt
Data imported: 3
Perform action:
> /printAll oneLine
List of elements:
true true true
Perform action:
[1;31m
Start test 57 (58)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /readFile integers.txt
Data imported: 3
Perform action:
> /printAll oneLine
List of elements:
"2147483647 2147483647 2147483647
Perform action:
[1;31m
Start test 58 (59)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /readFile strings.txt
Data imported: 3
Perform action:
> /printAll oneLine
List of elements:
"CakeIsALie CakeIsALie CakeIsALie
Perform action:
[1;31m
Start test 59 (60)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /writeFile result.txt
Data exported: 4
Perform action:
	> /clear
Data cleared
Perform action:
> /readFile result.txt
Data imported: 4
Perform action:
> /printAll oneLine
List of elements:
true false false true
Perform action:
[1;31m
Start test 60 (61)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /writeFile result.txt
Data exported: 4
Perform action:
	> /clear
Data cleared
Perform action:
> /readFile result.txt
Data imported: 4
Perform action:
> /printAll oneLine
List of elements:
2 -1 -1 2
Perform action:
[1;31m
Start test 61 (62)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /writeFile result.txt
Data exported: 4
Perform action:
	> /clear
Data cleared
Perform action:
> /readFile result.txt
Data imported: 4
Perform action:
> /printAll oneLine
List of elements:
1CakeIsALie CakeIsATruth CakeIsATruth CakeIsALie
Perform action:
[1;31m
Start test 62 (63)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:
	> /add 4
Element 4 added
Perform action:
> /sum 0 1
!Calculation performed: 2 + 4 = 6
Perform action:
> /subtract 0 1
"Calculation performed: 2 - 4 = -2
Perform action:
> /multiply 0 1
!Calculation performed: 2 * 4 = 8
Perform action:
> /divide 1 0
(Calculation performed: 4 / 2 = 2.000000
Perform action:
> /pow 0 1
"Calculation performed: 2 ^ 4 = 16
Perform action:
> /factorial 1
Calculation performed: 4! = 24
Perform action:

> /sumAll
Sum of all elements: 6
Perform action:
> /average
Average of all elements: 3
Perform action:
[1;31m
Start test 63 (64)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Hello,
Element Hello, added
Perform action:
> /add world!
Element world! added
Perform action:
> /concat 0 1
#Concatenated string: Hello,world!
Perform action:
> /swapCase 1
+"world!" string with swapped case: WORLD!
Perform action:
> /upper 0
"Uppercase "Hello," string: HELLO,
Perform action:
> /lower 0
"Lowercase "Hello," string: hello,
Perform action:
> /reverse 0
!Reversed "Hello," string: ,olleH
Perform action:
> /length 0
Length of "Hello," string: 6
Perform action:

> /join _
Joined string: Hello,_world!
Perform action:
> /regex H.+
$Strings that match provided regex:

[Hello,]
Perform action:
> /regex .+\!
$Strings that match provided regex:

[world!]
Perform action:
[1;31m
Start test 64 (65)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:

> /flip 0
Element on 0 position flipped
Perform action:
> /printAll oneLine
List of elements:
.true true false true false false false false
Perform action:
> /negateAll
All elements negated
Perform action:
> /printAll oneLine
List of elements:
,false false true false true true true true
Perform action:
> /logShift 2
Elements shifted by 2
Perform action:
> /printAll oneLine
List of elements:
,true true false false true false true true
Perform action:
> /logShift -2
Elements shifted by -2
Perform action:
> /printAll oneLine
List of elements:
,false false true false true true true true
Perform action:
> /and 0 4
.Operation performed: (false && true) is false
Perform action:

> /or 0 4
-Operation performed: (false || true) is true
Perform action:
> /convertTo string
Converted: /
Perform action:
> /convertTo number
Converted: 47
Perform action:
	> /morse
Morse code: __._....
Perform action:
[1;31m
Start test 1 (66)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /getRandom
Random element: true
Perform action:
> /getRandom
Random element: true
Perform action:
> /getRandom
Random element: false
Perform action:
[1;31m
Start test 2 (67)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /getRandom
Random element: false
Perform action:
> /getRandom
Random element: false
Perform action:
> /getRandom
Random element: false
Perform action:
[1;31m
Start test 3 (68)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /getRandom
Random element: false
Perform action:
> /getRandom
Random element: true
Perform action:
> /getRandom
Random element: false
Perform action:
> /getRandom
Random element: true
Perform action:
> /getRandom
Random element: false
Perform action:
[1;31m
Start test 4 (69)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 1
Element 1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /getRandom
Random element: 1
Perform action:
> /getRandom
Random element: 2
Perform action:
[1;31m
Start test 5 (70)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 5
Element 5 added
Perform action:
	> /add 3
Element 3 added
Perform action:
	> /add 4
Element 4 added
Perform action:
> /getRandom
Random element: 4
Perform action:
> /getRandom
Random element: 4
Perform action:
> /getRandom
Random element: 3
Perform action:
> /getRandom
Random element: 4
Perform action:
> /getRandom
Random element: 4
Perform action:
> /getRandom
Random element: 5
Perform action:
> /getRandom
Random element: 5
Perform action:
> /getRandom
Random element: 3
Perform action:
> /getRandom
Random element: 3
Perform action:
> /getRandom
Random element: 3
Perform action:
> /getRandom
Random element: 5
Perform action:
> /getRandom
Random element: 4
Perform action:
[1;31m
Start test 6 (71)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 7
Element 7 added
Perform action:
	> /add 8
Element 8 added
Perform action:
	> /add 6
Element 6 added
Perform action:
	> /add 9
Element 9 added
Perform action:
> /getRandom
Random element: 6
Perform action:
> /getRandom
Random element: 9
Perform action:
> /getRandom
Random element: 7
Perform action:
> /getRandom
Random element: 6
Perform action:
> /getRandom
Random element: 6
Perform action:
> /getRandom
Random element: 9
Perform action:
> /getRandom
Random element: 8
Perform action:
> /getRandom
Random element: 9
Perform action:
> /getRandom
Random element: 9
Perform action:
> /getRandom
Random element: 6
Perform action:
> /getRandom
Random element: 9
Perform action:
[1;31m
Start test 7 (72)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Hello
Element Hello added
Perform action:
> /add World
Element World added
Perform action:
> /getRandom
Random element: World
Perform action:
> /getRandom
Random element: World
Perform action:
> /getRandom
Random element: World
Perform action:
> /getRandom
Random element: Hello
Perform action:
> /getRandom
Random element: Hello
Perform action:
> /getRandom
Random element: Hello
Perform action:
> /getRandom
Random element: Hello
Perform action:
> /getRandom
Random element: Hello
Perform action:
> /getRandom
Random element: Hello
Perform action:
> /getRandom
Random element: Hello
Perform action:
> /getRandom
Random element: Hello
Perform action:
> /getRandom
Random element: Hello
Perform action:
> /getRandom
Random element: Hello
Perform action:
> /getRandom
Random element: Hello
Perform action:
> /getRandom
Random element: World
Perform action:
[1;31m
Start test 8 (73)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Around
Element Around added
Perform action:
> /add The
Element The added
Perform action:
> /add world
Element world added
Perform action:
> /getRandom
Random element: Around
Perform action:
> /getRandom
Random element: The
Perform action:
> /getRandom
Random element: world
Perform action:
[1;31m
Start test 9 (74)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Four
Element Four added
Perform action:
> /add Very
Element Very added
Perform action:
> /add interesting
Element interesting added
Perform action:
> /add Words
Element Words added
Perform action:
> /getRandom
Random element: Words
Perform action:
> /getRandom
Random element: interesting
Perform action:
> /getRandom
Random element: Four
Perform action:
> /getRandom
Random element: Four
Perform action:
> /getRandom
Random element: Very
Perform action:
> /getRandom
Random element: Very
Perform action:
> /getRandom
Random element: interesting
Perform action:
> /getRandom
Random element: interesting
Perform action:
> /getRandom
Random element: Words
Perform action:
[1;31m
Start test 10 (75)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /readFile booleans.txt
Data imported: 10
Perform action:
> /readFile booleans2.txt
Data imported: 2
Perform action:
[1;31m
Start test 11 (76)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /readFile booleans.txt
Data imported: 10
Perform action:
> /readFile booleans2.txt
Data imported: 2
Perform action:
[1;31m
Start test 12 (77)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /readFile booleans.txt
Data imported: 10
Perform action:
> /readFile booleans2.txt
Data imported: 2
Perform action:
[1;31m
Start test 13 (78)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 1
Element 1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /readFile numbers.txt
Data imported: 10
Perform action:
> /readFile numbers2.txt
Data imported: 2
Perform action:
[1;31m
Start test 14 (79)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 5
Element 5 added
Perform action:
	> /add 3
Element 3 added
Perform action:
	> /add 4
Element 4 added
Perform action:
> /readFile numbers.txt
Data imported: 10
Perform action:
> /readFile numbers2.txt
Data imported: 2
Perform action:
[1;31m
Start test 15 (80)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 7
Element 7 added
Perform action:
	> /add 8
Element 8 added
Perform action:
	> /add 6
Element 6 added
Perform action:
	> /add 9
Element 9 added
Perform action:
> /readFile numbers.txt
Data imported: 10
Perform action:
> /readFile numbers2.txt
Data imported: 2
Perform action:
[1;31m
Start test 16 (81)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Hello
Element Hello added
Perform action:
> /add World
Element World added
Perform action:
> /readFile words.txt
Data imported: 10
Perform action:
> /readFile words2.txt
Data imported: 2
Perform action:
[1;31m
Start test 17 (82)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Around
Element Around added
Perform action:
> /add The
Element The added
Perform action:
> /add world
Element world added
Perform action:
> /readFile words.txt
Data imported: 10
Perform action:
> /readFile words2.txt
Data imported: 2
Perform action:
[1;31m
Start test 18 (83)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Four
Element Four added
Perform action:
> /add Very
Element Very added
Perform action:
> /add interesting
Element interesting added
Perform action:
> /add Words
Element Words added
Perform action:
> /readFile words.txt
Data imported: 10
Perform action:
> /readFile words2.txt
Data imported: 2
Perform action:
[1;31m
Start test 19 (84)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:

> /mirror
Data reversed
Perform action:
> /printAll asList
List of elements:
[false, true]
Perform action:
[1;31m
Start test 20 (85)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:

> /mirror
Data reversed
Perform action:
> /printAll asList
List of elements:
[false, false, false]
Perform action:
[1;31m
Start test 21 (86)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:

> /mirror
Data reversed
Perform action:
> /printAll asList
List of elements:
[false, true, false, true]
Perform action:
[1;31m
Start test 22 (87)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 1
Element 1 added
Perform action:
	> /add 2
Element 2 added
Perform action:

> /mirror
Data reversed
Perform action:
> /printAll asList
List of elements:
[2, 1]
Perform action:
[1;31m
Start test 23 (88)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 5
Element 5 added
Perform action:
	> /add 3
Element 3 added
Perform action:
	> /add 4
Element 4 added
Perform action:

> /mirror
Data reversed
Perform action:
> /printAll asList
List of elements:
[4, 3, 5]
Perform action:
[1;31m
Start test 24 (89)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 7
Element 7 added
Perform action:
	> /add 8
Element 8 added
Perform action:
	> /add 6
Element 6 added
Perform action:
	> /add 9
Element 9 added
Perform action:

> /mirror
Data reversed
Perform action:
> /printAll asList
List of elements:
[9, 6, 8, 7]
Perform action:
[1;31m
Start test 25 (90)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Hello
Element Hello added
Perform action:
> /add World
Element World added
Perform action:

> /mirror
Data reversed
Perform action:
> /printAll asList
List of elements:
[World, Hello]
Perform action:
[1;31m
Start test 26 (91)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Around
Element Around added
Perform action:
> /add The
Element The added
Perform action:
> /add world
Element world added
Perform action:

> /mirror
Data reversed
Perform action:
> /printAll asList
List of elements:
[world, The, Around]
Perform action:
[1;31m
Start test 27 (92)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Four
Element Four added
Perform action:
> /add Very
Element Very added
Perform action:
> /add interesting
Element interesting added
Perform action:
> /add Words
Element Words added
Perform action:

> /mirror
Data reversed
Perform action:
> /printAll asList
List of elements:
"[Words, interesting, Very, Four]
Perform action:
[1;31m
Start test 28 (93)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /printAll asList
List of elements:
[false, true]
Perform action:
> /sort descending
Memory sorted descending
Perform action:
> /printAll asList
List of elements:
[true, false]
Perform action:
[1;31m
Start test 29 (94)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /printAll asList
List of elements:
[false, false, false]
Perform action:
> /sort descending
Memory sorted descending
Perform action:
> /printAll asList
List of elements:
[false, false, false]
Perform action:
[1;31m
Start test 30 (95)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /printAll asList
List of elements:
[false, false, true, true]
Perform action:
> /sort descending
Memory sorted descending
Perform action:
> /printAll asList
List of elements:
[true, true, false, false]
Perform action:
[1;31m
Start test 31 (96)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 1
Element 1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /printAll asList
List of elements:
[1, 2]
Perform action:
> /sort descending
Memory sorted descending
Perform action:
> /printAll asList
List of elements:
[2, 1]
Perform action:
[1;31m
Start test 32 (97)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 5
Element 5 added
Perform action:
	> /add 3
Element 3 added
Perform action:
	> /add 4
Element 4 added
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /printAll asList
List of elements:
[3, 4, 5]
Perform action:
> /sort descending
Memory sorted descending
Perform action:
> /printAll asList
List of elements:
[5, 4, 3]
Perform action:
[1;31m
Start test 33 (98)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 7
Element 7 added
Perform action:
	> /add 8
Element 8 added
Perform action:
	> /add 6
Element 6 added
Perform action:
	> /add 9
Element 9 added
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /printAll asList
List of elements:
[6, 7, 8, 9]
Perform action:
> /sort descending
Memory sorted descending
Perform action:
> /printAll asList
List of elements:
[9, 8, 7, 6]
Perform action:
[1;31m
Start test 34 (99)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Hello
Element Hello added
Perform action:
> /add World
Element World added
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /printAll asList
List of elements:
[Hello, World]
Perform action:
> /sort descending
Memory sorted descending
Perform action:
> /printAll asList
List of elements:
[World, Hello]
Perform action:
[1;31m
Start test 35 (100)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Around
Element Around added
Perform action:
> /add The
Element The added
Perform action:
> /add world
Element world added
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /printAll asList
List of elements:
[Around, The, world]
Perform action:
> /sort descending
Memory sorted descending
Perform action:
> /printAll asList
List of elements:
[world, The, Around]
Perform action:
[1;31m
Start test 36 (101)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Four
Element Four added
Perform action:
> /add Very
Element Very added
Perform action:
> /add interesting
Element interesting added
Perform action:
> /add Words
Element Words added
Perform action:
> /sort ascending
Memory sorted ascending
Perform action:
> /printAll asList
List of elements:
"[Four, Very, Words, interesting]
Perform action:
> /sort descending
Memory sorted descending
Perform action:
> /printAll asList
List of elements:
"[interesting, Words, Very, Four]
Perform action:
[1;31m
Start test 37 (102)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /and 0 0
,Operation performed: (true && true) is true
Perform action:

> /or 0 0
,Operation performed: (true || true) is true
Perform action:
> /and 0 1
.Operation performed: (true && false) is false
Perform action:

> /or 0 1
-Operation performed: (true || false) is true
Perform action:
> /and 0 2
,Operation performed: (true && true) is true
Perform action:

> /or 0 2
,Operation performed: (true || true) is true
Perform action:
> /and 0 3
.Operation performed: (true && false) is false
Perform action:

> /or 0 3
-Operation performed: (true || false) is true
Perform action:
> /and 0 4
.Operation performed: (true && false) is false
Perform action:

> /or 0 4
-Operation performed: (true || false) is true
Perform action:
> /and 0 5
,Operation performed: (true && true) is true
Perform action:

> /or 0 5
,Operation performed: (true || true) is true
Perform action:
> /and 0 6
,Operation performed: (true && true) is true
Perform action:

> /or 0 6
,Operation performed: (true || true) is true
Perform action:
> /and 0 7
.Operation performed: (true && false) is false
Perform action:

> /or 0 7
-Operation performed: (true || false) is true
Perform action:
> /and 1 0
.Operation performed: (false && true) is false
Perform action:

> /or 1 0
-Operation performed: (false || true) is true
Perform action:
> /and 1 1
/Operation performed: (false && false) is false
Perform action:

> /or 1 1
/Operation performed: (false || false) is false
Perform action:
> /and 1 2
.Operation performed: (false && true) is false
Perform action:

> /or 1 2
-Operation performed: (false || true) is true
Perform action:
> /and 1 3
/Operation performed: (false && false) is false
Perform action:

> /or 1 3
/Operation performed: (false || false) is false
Perform action:
> /and 1 4
/Operation performed: (false && false) is false
Perform action:

> /or 1 4
/Operation performed: (false || false) is false
Perform action:
> /and 1 5
.Operation performed: (false && true) is false
Perform action:

> /or 1 5
-Operation performed: (false || true) is true
Perform action:
> /and 1 6
.Operation performed: (false && true) is false
Perform action:

> /or 1 6
-Operation performed: (false || true) is true
Perform action:
> /and 1 7
/Operation performed: (false && false) is false
Perform action:

> /or 1 7
/Operation performed: (false || false) is false
Perform action:
> /and 2 0
,Operation performed: (true && true) is true
Perform action:

> /or 2 0
,Operation performed: (true || true) is true
Perform action:
> /and 2 1
.Operation performed: (true && false) is false
Perform action:

> /or 2 1
-Operation performed: (true || false) is true
Perform action:
> /and 2 2
,Operation performed: (true && true) is true
Perform action:

> /or 2 2
,Operation performed: (true || true) is true
Perform action:
> /and 2 3
.Operation performed: (true && false) is false
Perform action:

> /or 2 3
-Operation performed: (true || false) is true
Perform action:
> /and 2 4
.Operation performed: (true && false) is false
Perform action:

> /or 2 4
-Operation performed: (true || false) is true
Perform action:
> /and 2 5
,Operation performed: (true && true) is true
Perform action:

> /or 2 5
,Operation performed: (true || true) is true
Perform action:
> /and 2 6
,Operation performed: (true && true) is true
Perform action:

> /or 2 6
,Operation performed: (true || true) is true
Perform action:
> /and 2 7
.Operation performed: (true && false) is false
Perform action:

> /or 2 7
-Operation performed: (true || false) is true
Perform action:
> /and 3 0
.Operation performed: (false && true) is false
Perform action:

> /or 3 0
-Operation performed: (false || true) is true
Perform action:
> /and 3 1
/Operation performed: (false && false) is false
Perform action:

> /or 3 1
/Operation performed: (false || false) is false
Perform action:
> /and 3 2
.Operation performed: (false && true) is false
Perform action:

> /or 3 2
-Operation performed: (false || true) is true
Perform action:
> /and 3 3
/Operation performed: (false && false) is false
Perform action:

> /or 3 3
/Operation performed: (false || false) is false
Perform action:
> /and 3 4
/Operation performed: (false && false) is false
Perform action:

> /or 3 4
/Operation performed: (false || false) is false
Perform action:
> /and 3 5
.Operation performed: (false && true) is false
Perform action:

> /or 3 5
-Operation performed: (false || true) is true
Perform action:
> /and 3 6
.Operation performed: (false && true) is false
Perform action:

> /or 3 6
-Operation performed: (false || true) is true
Perform action:
> /and 3 7
/Operation performed: (false && false) is false
Perform action:

> /or 3 7
/Operation performed: (false || false) is false
Perform action:
> /and 4 0
.Operation performed: (false && true) is false
Perform action:

> /or 4 0
-Operation performed: (false || true) is true
Perform action:
> /and 4 1
/Operation performed: (false && false) is false
Perform action:

> /or 4 1
/Operation performed: (false || false) is false
Perform action:
> /and 4 2
.Operation performed: (false && true) is false
Perform action:

> /or 4 2
-Operation performed: (false || true) is true
Perform action:
> /and 4 3
/Operation performed: (false && false) is false
Perform action:

> /or 4 3
/Operation performed: (false || false) is false
Perform action:
> /and 4 4
/Operation performed: (false && false) is false
Perform action:

> /or 4 4
/Operation performed: (false || false) is false
Perform action:
> /and 4 5
.Operation performed: (false && true) is false
Perform action:

> /or 4 5
-Operation performed: (false || true) is true
Perform action:
> /and 4 6
.Operation performed: (false && true) is false
Perform action:

> /or 4 6
-Operation performed: (false || true) is true
Perform action:
> /and 4 7
/Operation performed: (false && false) is false
Perform action:

> /or 4 7
/Operation performed: (false || false) is false
Perform action:
> /and 5 0
,Operation performed: (true && true) is true
Perform action:

> /or 5 0
,Operation performed: (true || true) is true
Perform action:
> /and 5 1
.Operation performed: (true && false) is false
Perform action:

> /or 5 1
-Operation performed: (true || false) is true
Perform action:
> /and 5 2
,Operation performed: (true && true) is true
Perform action:

> /or 5 2
,Operation performed: (true || true) is true
Perform action:
> /and 5 3
.Operation performed: (true && false) is false
Perform action:

> /or 5 3
-Operation performed: (true || false) is true
Perform action:
> /and 5 4
.Operation performed: (true && false) is false
Perform action:

> /or 5 4
-Operation performed: (true || false) is true
Perform action:
> /and 5 5
,Operation performed: (true && true) is true
Perform action:

> /or 5 5
,Operation performed: (true || true) is true
Perform action:
> /and 5 6
,Operation performed: (true && true) is true
Perform action:

> /or 5 6
,Operation performed: (true || true) is true
Perform action:
> /and 5 7
.Operation performed: (true && false) is false
Perform action:

> /or 5 7
-Operation performed: (true || false) is true
Perform action:
> /and 6 0
,Operation performed: (true && true) is true
Perform action:

> /or 6 0
,Operation performed: (true || true) is true
Perform action:
> /and 6 1
.Operation performed: (true && false) is false
Perform action:

> /or 6 1
-Operation performed: (true || false) is true
Perform action:
> /and 6 2
,Operation performed: (true && true) is true
Perform action:

> /or 6 2
,Operation performed: (true || true) is true
Perform action:
> /and 6 3
.Operation performed: (true && false) is false
Perform action:

> /or 6 3
-Operation performed: (true || false) is true
Perform action:
> /and 6 4
.Operation performed: (true && false) is false
Perform action:

> /or 6 4
-Operation performed: (true || false) is true
Perform action:
> /and 6 5
,Operation performed: (true && true) is true
Perform action:

> /or 6 5
,Operation performed: (true || true) is true
Perform action:
> /and 6 6
,Operation performed: (true && true) is true
Perform action:

> /or 6 6
,Operation performed: (true || true) is true
Perform action:
> /and 6 7
.Operation performed: (true && false) is false
Perform action:

> /or 6 7
-Operation performed: (true || false) is true
Perform action:
> /and 7 0
.Operation performed: (false && true) is false
Perform action:

> /or 7 0
-Operation performed: (false || true) is true
Perform action:
> /and 7 1
/Operation performed: (false && false) is false
Perform action:

> /or 7 1
/Operation performed: (false || false) is false
Perform action:
> /and 7 2
.Operation performed: (false && true) is false
Perform action:

> /or 7 2
-Operation performed: (false || true) is true
Perform action:
> /and 7 3
/Operation performed: (false && false) is false
Perform action:

> /or 7 3
/Operation performed: (false || false) is false
Perform action:
> /and 7 4
/Operation performed: (false && false) is false
Perform action:

> /or 7 4
/Operation performed: (false || false) is false
Perform action:
> /and 7 5
.Operation performed: (false && true) is false
Perform action:

> /or 7 5
-Operation performed: (false || true) is true
Perform action:
> /and 7 6
.Operation performed: (false && true) is false
Perform action:

> /or 7 6
-Operation performed: (false || true) is true
Perform action:
> /and 7 7
/Operation performed: (false && false) is false
Perform action:

> /or 7 7
/Operation performed: (false || false) is false
Perform action:

> /flip 0
Element on 0 position flipped
Perform action:
> /print 0
 Element on 0 position is false
Perform action:

> /flip 1
Element on 1 position flipped
Perform action:
> /print 1
Element on 1 position is true
Perform action:

> /flip 2
Element on 2 position flipped
Perform action:
> /print 2
 Element on 2 position is false
Perform action:

> /flip 3
Element on 3 position flipped
Perform action:
> /print 3
Element on 3 position is true
Perform action:

> /flip 4
Element on 4 position flipped
Perform action:
> /print 4
Element on 4 position is true
Perform action:

> /flip 5
Element on 5 position flipped
Perform action:
> /print 5
 Element on 5 position is false
Perform action:

> /flip 6
Element on 6 position flipped
Perform action:
> /print 6
 Element on 6 position is false
Perform action:

> /flip 7
Element on 7 position flipped
Perform action:
> /print 7
Element on 7 position is true
Perform action:
[1;31m
Start test 38 (103)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /and 0 0
,Operation performed: (true && true) is true
Perform action:

> /or 0 0
,Operation performed: (true || true) is true
Perform action:
> /and 0 1
,Operation performed: (true && true) is true
Perform action:

> /or 0 1
,Operation performed: (true || true) is true
Perform action:
> /and 0 2
,Operation performed: (true && true) is true
Perform action:

> /or 0 2
,Operation performed: (true || true) is true
Perform action:
> /and 0 3
.Operation performed: (true && false) is false
Perform action:

> /or 0 3
-Operation performed: (true || false) is true
Perform action:
> /and 0 4
,Operation performed: (true && true) is true
Perform action:

> /or 0 4
,Operation performed: (true || true) is true
Perform action:
> /and 0 5
.Operation performed: (true && false) is false
Perform action:

> /or 0 5
-Operation performed: (true || false) is true
Perform action:
> /and 0 6
,Operation performed: (true && true) is true
Perform action:

> /or 0 6
,Operation performed: (true || true) is true
Perform action:
> /and 0 7
,Operation performed: (true && true) is true
Perform action:

> /or 0 7
,Operation performed: (true || true) is true
Perform action:
> /and 0 8
.Operation performed: (true && false) is false
Perform action:

> /or 0 8
-Operation performed: (true || false) is true
Perform action:
> /and 0 9
.Operation performed: (true && false) is false
Perform action:

> /or 0 9
-Operation performed: (true || false) is true
Perform action:
> /and 1 0
,Operation performed: (true && true) is true
Perform action:

> /or 1 0
,Operation performed: (true || true) is true
Perform action:
> /and 1 1
,Operation performed: (true && true) is true
Perform action:

> /or 1 1
,Operation performed: (true || true) is true
Perform action:
> /and 1 2
,Operation performed: (true && true) is true
Perform action:

> /or 1 2
,Operation performed: (true || true) is true
Perform action:
> /and 1 3
.Operation performed: (true && false) is false
Perform action:

> /or 1 3
-Operation performed: (true || false) is true
Perform action:
> /and 1 4
,Operation performed: (true && true) is true
Perform action:

> /or 1 4
,Operation performed: (true || true) is true
Perform action:
> /and 1 5
.Operation performed: (true && false) is false
Perform action:

> /or 1 5
-Operation performed: (true || false) is true
Perform action:
> /and 1 6
,Operation performed: (true && true) is true
Perform action:

> /or 1 6
,Operation performed: (true || true) is true
Perform action:
> /and 1 7
,Operation performed: (true && true) is true
Perform action:

> /or 1 7
,Operation performed: (true || true) is true
Perform action:
> /and 1 8
.Operation performed: (true && false) is false
Perform action:

> /or 1 8
-Operation performed: (true || false) is true
Perform action:
> /and 1 9
.Operation performed: (true && false) is false
Perform action:

> /or 1 9
-Operation performed: (true || false) is true
Perform action:
> /and 2 0
,Operation performed: (true && true) is true
Perform action:

> /or 2 0
,Operation performed: (true || true) is true
Perform action:
> /and 2 1
,Operation performed: (true && true) is true
Perform action:

> /or 2 1
,Operation performed: (true || true) is true
Perform action:
> /and 2 2
,Operation performed: (true && true) is true
Perform action:

> /or 2 2
,Operation performed: (true || true) is true
Perform action:
> /and 2 3
.Operation performed: (true && false) is false
Perform action:

> /or 2 3
-Operation performed: (true || false) is true
Perform action:
> /and 2 4
,Operation performed: (true && true) is true
Perform action:

> /or 2 4
,Operation performed: (true || true) is true
Perform action:
> /and 2 5
.Operation performed: (true && false) is false
Perform action:

> /or 2 5
-Operation performed: (true || false) is true
Perform action:
> /and 2 6
,Operation performed: (true && true) is true
Perform action:

> /or 2 6
,Operation performed: (true || true) is true
Perform action:
> /and 2 7
,Operation performed: (true && true) is true
Perform action:

> /or 2 7
,Operation performed: (true || true) is true
Perform action:
> /and 2 8
.Operation performed: (true && false) is false
Perform action:

> /or 2 8
-Operation performed: (true || false) is true
Perform action:
> /and 2 9
.Operation performed: (true && false) is false
Perform action:

> /or 2 9
-Operation performed: (true || false) is true
Perform action:
> /and 3 0
.Operation performed: (false && true) is false
Perform action:

> /or 3 0
-Operation performed: (false || true) is true
Perform action:
> /and 3 1
.Operation performed: (false && true) is false
Perform action:

> /or 3 1
-Operation performed: (false || true) is true
Perform action:
> /and 3 2
.Operation performed: (false && true) is false
Perform action:

> /or 3 2
-Operation performed: (false || true) is true
Perform action:
> /and 3 3
/Operation performed: (false && false) is false
Perform action:

> /or 3 3
/Operation performed: (false || false) is false
Perform action:
> /and 3 4
.Operation performed: (false && true) is false
Perform action:

> /or 3 4
-Operation performed: (false || true) is true
Perform action:
> /and 3 5
/Operation performed: (false && false) is false
Perform action:

> /or 3 5
/Operation performed: (false || false) is false
Perform action:
> /and 3 6
.Operation performed: (false && true) is false
Perform action:

> /or 3 6
-Operation performed: (false || true) is true
Perform action:
> /and 3 7
.Operation performed: (false && true) is false
Perform action:

> /or 3 7
-Operation performed: (false || true) is true
Perform action:
> /and 3 8
/Operation performed: (false && false) is false
Perform action:

> /or 3 8
/Operation performed: (false || false) is false
Perform action:
> /and 3 9
/Operation performed: (false && false) is false
Perform action:

> /or 3 9
/Operation performed: (false || false) is false
Perform action:
> /and 4 0
,Operation performed: (true && true) is true
Perform action:

> /or 4 0
,Operation performed: (true || true) is true
Perform action:
> /and 4 1
,Operation performed: (true && true) is true
Perform action:

> /or 4 1
,Operation performed: (true || true) is true
Perform action:
> /and 4 2
,Operation performed: (true && true) is true
Perform action:

> /or 4 2
,Operation performed: (true || true) is true
Perform action:
> /and 4 3
.Operation performed: (true && false) is false
Perform action:

> /or 4 3
-Operation performed: (true || false) is true
Perform action:
> /and 4 4
,Operation performed: (true && true) is true
Perform action:

> /or 4 4
,Operation performed: (true || true) is true
Perform action:
> /and 4 5
.Operation performed: (true && false) is false
Perform action:

> /or 4 5
-Operation performed: (true || false) is true
Perform action:
> /and 4 6
,Operation performed: (true && true) is true
Perform action:

> /or 4 6
,Operation performed: (true || true) is true
Perform action:
> /and 4 7
,Operation performed: (true && true) is true
Perform action:

> /or 4 7
,Operation performed: (true || true) is true
Perform action:
> /and 4 8
.Operation performed: (true && false) is false
Perform action:

> /or 4 8
-Operation performed: (true || false) is true
Perform action:
> /and 4 9
.Operation performed: (true && false) is false
Perform action:

> /or 4 9
-Operation performed: (true || false) is true
Perform action:
> /and 5 0
.Operation performed: (false && true) is false
Perform action:

> /or 5 0
-Operation performed: (false || true) is true
Perform action:
> /and 5 1
.Operation performed: (false && true) is false
Perform action:

> /or 5 1
-Operation performed: (false || true) is true
Perform action:
> /and 5 2
.Operation performed: (false && true) is false
Perform action:

> /or 5 2
-Operation performed: (false || true) is true
Perform action:
> /and 5 3
/Operation performed: (false && false) is false
Perform action:

> /or 5 3
/Operation performed: (false || false) is false
Perform action:
> /and 5 4
.Operation performed: (false && true) is false
Perform action:

> /or 5 4
-Operation performed: (false || true) is true
Perform action:
> /and 5 5
/Operation performed: (false && false) is false
Perform action:

> /or 5 5
/Operation performed: (false || false) is false
Perform action:
> /and 5 6
.Operation performed: (false && true) is false
Perform action:

> /or 5 6
-Operation performed: (false || true) is true
Perform action:
> /and 5 7
.Operation performed: (false && true) is false
Perform action:

> /or 5 7
-Operation performed: (false || true) is true
Perform action:
> /and 5 8
/Operation performed: (false && false) is false
Perform action:

> /or 5 8
/Operation performed: (false || false) is false
Perform action:
> /and 5 9
/Operation performed: (false && false) is false
Perform action:

> /or 5 9
/Operation performed: (false || false) is false
Perform action:
> /and 6 0
,Operation performed: (true && true) is true
Perform action:

> /or 6 0
,Operation performed: (true || true) is true
Perform action:
> /and 6 1
,Operation performed: (true && true) is true
Perform action:

> /or 6 1
,Operation performed: (true || true) is true
Perform action:
> /and 6 2
,Operation performed: (true && true) is true
Perform action:

> /or 6 2
,Operation performed: (true || true) is true
Perform action:
> /and 6 3
.Operation performed: (true && false) is false
Perform action:

> /or 6 3
-Operation performed: (true || false) is true
Perform action:
> /and 6 4
,Operation performed: (true && true) is true
Perform action:

> /or 6 4
,Operation performed: (true || true) is true
Perform action:
> /and 6 5
.Operation performed: (true && false) is false
Perform action:

> /or 6 5
-Operation performed: (true || false) is true
Perform action:
> /and 6 6
,Operation performed: (true && true) is true
Perform action:

> /or 6 6
,Operation performed: (true || true) is true
Perform action:
> /and 6 7
,Operation performed: (true && true) is true
Perform action:

> /or 6 7
,Operation performed: (true || true) is true
Perform action:
> /and 6 8
.Operation performed: (true && false) is false
Perform action:

> /or 6 8
-Operation performed: (true || false) is true
Perform action:
> /and 6 9
.Operation performed: (true && false) is false
Perform action:

> /or 6 9
-Operation performed: (true || false) is true
Perform action:
> /and 7 0
,Operation performed: (true && true) is true
Perform action:

> /or 7 0
,Operation performed: (true || true) is true
Perform action:
> /and 7 1
,Operation performed: (true && true) is true
Perform action:

> /or 7 1
,Operation performed: (true || true) is true
Perform action:
> /and 7 2
,Operation performed: (true && true) is true
Perform action:

> /or 7 2
,Operation performed: (true || true) is true
Perform action:
> /and 7 3
.Operation performed: (true && false) is false
Perform action:

> /or 7 3
-Operation performed: (true || false) is true
Perform action:
> /and 7 4
,Operation performed: (true && true) is true
Perform action:

> /or 7 4
,Operation performed: (true || true) is true
Perform action:
> /and 7 5
.Operation performed: (true && false) is false
Perform action:

> /or 7 5
-Operation performed: (true || false) is true
Perform action:
> /and 7 6
,Operation performed: (true && true) is true
Perform action:

> /or 7 6
,Operation performed: (true || true) is true
Perform action:
> /and 7 7
,Operation performed: (true && true) is true
Perform action:

> /or 7 7
,Operation performed: (true || true) is true
Perform action:
> /and 7 8
.Operation performed: (true && false) is false
Perform action:

> /or 7 8
-Operation performed: (true || false) is true
Perform action:
> /and 7 9
.Operation performed: (true && false) is false
Perform action:

> /or 7 9
-Operation performed: (true || false) is true
Perform action:
> /and 8 0
.Operation performed: (false && true) is false
Perform action:

> /or 8 0
-Operation performed: (false || true) is true
Perform action:
> /and 8 1
.Operation performed: (false && true) is false
Perform action:

> /or 8 1
-Operation performed: (false || true) is true
Perform action:
> /and 8 2
.Operation performed: (false && true) is false
Perform action:

> /or 8 2
-Operation performed: (false || true) is true
Perform action:
> /and 8 3
/Operation performed: (false && false) is false
Perform action:

> /or 8 3
/Operation performed: (false || false) is false
Perform action:
> /and 8 4
.Operation performed: (false && true) is false
Perform action:

> /or 8 4
-Operation performed: (false || true) is true
Perform action:
> /and 8 5
/Operation performed: (false && false) is false
Perform action:

> /or 8 5
/Operation performed: (false || false) is false
Perform action:
> /and 8 6
.Operation performed: (false && true) is false
Perform action:

> /or 8 6
-Operation performed: (false || true) is true
Perform action:
> /and 8 7
.Operation performed: (false && true) is false
Perform action:

> /or 8 7
-Operation performed: (false || true) is true
Perform action:
> /and 8 8
/Operation performed: (false && false) is false
Perform action:

> /or 8 8
/Operation performed: (false || false) is false
Perform action:
> /and 8 9
/Operation performed: (false && false) is false
Perform action:

> /or 8 9
/Operation performed: (false || false) is false
Perform action:
> /and 9 0
.Operation performed: (false && true) is false
Perform action:

> /or 9 0
-Operation performed: (false || true) is true
Perform action:
> /and 9 1
.Operation performed: (false && true) is false
Perform action:

> /or 9 1
-Operation performed: (false || true) is true
Perform action:
> /and 9 2
.Operation performed: (false && true) is false
Perform action:

> /or 9 2
-Operation performed: (false || true) is true
Perform action:
> /and 9 3
/Operation performed: (false && false) is false
Perform action:

> /or 9 3
/Operation performed: (false || false) is false
Perform action:
> /and 9 4
.Operation performed: (false && true) is false
Perform action:

> /or 9 4
-Operation performed: (false || true) is true
Perform action:
> /and 9 5
/Operation performed: (false && false) is false
Perform action:

> /or 9 5
/Operation performed: (false || false) is false
Perform action:
> /and 9 6
.Operation performed: (false && true) is false
Perform action:

> /or 9 6
-Operation performed: (false || true) is true
Perform action:
> /and 9 7
.Operation performed: (false && true) is false
Perform action:

> /or 9 7
-Operation performed: (false || true) is true
Perform action:
> /and 9 8
/Operation performed: (false && false) is false
Perform action:

> /or 9 8
/Operation performed: (false || false) is false
Perform action:
> /and 9 9
/Operation performed: (false && false) is false
Perform action:

> /or 9 9
/Operation performed: (false || false) is false
Perform action:

> /flip 0
Element on 0 position flipped
Perform action:
> /print 0
 Element on 0 position is false
Perform action:

> /flip 1
Element on 1 position flipped
Perform action:
> /print 1
 Element on 1 position is false
Perform action:

> /flip 2
Element on 2 position flipped
Perform action:
> /print 2
 Element on 2 position is false
Perform action:

> /flip 3
Element on 3 position flipped
Perform action:
> /print 3
Element on 3 position is true
Perform action:

> /flip 4
Element on 4 position flipped
Perform action:
> /print 4
 Element on 4 position is false
Perform action:

> /flip 5
Element on 5 position flipped
Perform action:
> /print 5
Element on 5 position is true
Perform action:

> /flip 6
Element on 6 position flipped
Perform action:
> /print 6
 Element on 6 position is false
Perform action:

> /flip 7
Element on 7 position flipped
Perform action:
> /print 7
 Element on 7 position is false
Perform action:

> /flip 8
Element on 8 position flipped
Perform action:
> /print 8
Element on 8 position is true
Perform action:

> /flip 9
Element on 9 position flipped
Perform action:
> /print 9
Element on 9 position is true
Perform action:
[1;31m
Start test 39 (104)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /and 0 0
/Operation performed: (false && false) is false
Perform action:

> /or 0 0
/Operation performed: (false || false) is false
Perform action:
> /and 0 1
/Operation performed: (false && false) is false
Perform action:

> /or 0 1
/Operation performed: (false || false) is false
Perform action:
> /and 0 2
/Operation performed: (false && false) is false
Perform action:

> /or 0 2
/Operation performed: (false || false) is false
Perform action:
> /and 0 3
.Operation performed: (false && true) is false
Perform action:

> /or 0 3
-Operation performed: (false || true) is true
Perform action:
> /and 0 4
.Operation performed: (false && true) is false
Perform action:

> /or 0 4
-Operation performed: (false || true) is true
Perform action:
> /and 0 5
.Operation performed: (false && true) is false
Perform action:

> /or 0 5
-Operation performed: (false || true) is true
Perform action:
> /and 0 6
/Operation performed: (false && false) is false
Perform action:

> /or 0 6
/Operation performed: (false || false) is false
Perform action:
> /and 0 7
.Operation performed: (false && true) is false
Perform action:

> /or 0 7
-Operation performed: (false || true) is true
Perform action:
> /and 0 8
/Operation performed: (false && false) is false
Perform action:

> /or 0 8
/Operation performed: (false || false) is false
Perform action:
> /and 0 9
.Operation performed: (false && true) is false
Perform action:

> /or 0 9
-Operation performed: (false || true) is true
Perform action:
> /and 0 10
.Operation performed: (false && true) is false
Perform action:
> /or 0 10
-Operation performed: (false || true) is true
Perform action:
> /and 0 11
/Operation performed: (false && false) is false
Perform action:
> /or 0 11
/Operation performed: (false || false) is false
Perform action:
> /and 1 0
/Operation performed: (false && false) is false
Perform action:

> /or 1 0
/Operation performed: (false || false) is false
Perform action:
> /and 1 1
/Operation performed: (false && false) is false
Perform action:

> /or 1 1
/Operation performed: (false || false) is false
Perform action:
> /and 1 2
/Operation performed: (false && false) is false
Perform action:

> /or 1 2
/Operation performed: (false || false) is false
Perform action:
> /and 1 3
.Operation performed: (false && true) is false
Perform action:

> /or 1 3
-Operation performed: (false || true) is true
Perform action:
> /and 1 4
.Operation performed: (false && true) is false
Perform action:

> /or 1 4
-Operation performed: (false || true) is true
Perform action:
> /and 1 5
.Operation performed: (false && true) is false
Perform action:

> /or 1 5
-Operation performed: (false || true) is true
Perform action:
> /and 1 6
/Operation performed: (false && false) is false
Perform action:

> /or 1 6
/Operation performed: (false || false) is false
Perform action:
> /and 1 7
.Operation performed: (false && true) is false
Perform action:

> /or 1 7
-Operation performed: (false || true) is true
Perform action:
> /and 1 8
/Operation performed: (false && false) is false
Perform action:

> /or 1 8
/Operation performed: (false || false) is false
Perform action:
> /and 1 9
.Operation performed: (false && true) is false
Perform action:

> /or 1 9
-Operation performed: (false || true) is true
Perform action:
> /and 1 10
.Operation performed: (false && true) is false
Perform action:
> /or 1 10
-Operation performed: (false || true) is true
Perform action:
> /and 1 11
/Operation performed: (false && false) is false
Perform action:
> /or 1 11
/Operation performed: (false || false) is false
Perform action:
> /and 2 0
/Operation performed: (false && false) is false
Perform action:

> /or 2 0
/Operation performed: (false || false) is false
Perform action:
> /and 2 1
/Operation performed: (false && false) is false
Perform action:

> /or 2 1
/Operation performed: (false || false) is false
Perform action:
> /and 2 2
/Operation performed: (false && false) is false
Perform action:

> /or 2 2
/Operation performed: (false || false) is false
Perform action:
> /and 2 3
.Operation performed: (false && true) is false
Perform action:

> /or 2 3
-Operation performed: (false || true) is true
Perform action:
> /and 2 4
.Operation performed: (false && true) is false
Perform action:

> /or 2 4
-Operation performed: (false || true) is true
Perform action:
> /and 2 5
.Operation performed: (false && true) is false
Perform action:

> /or 2 5
-Operation performed: (false || true) is true
Perform action:
> /and 2 6
/Operation performed: (false && false) is false
Perform action:

> /or 2 6
/Operation performed: (false || false) is false
Perform action:
> /and 2 7
.Operation performed: (false && true) is false
Perform action:

> /or 2 7
-Operation performed: (false || true) is true
Perform action:
> /and 2 8
/Operation performed: (false && false) is false
Perform action:

> /or 2 8
/Operation performed: (false || false) is false
Perform action:
> /and 2 9
.Operation performed: (false && true) is false
Perform action:

> /or 2 9
-Operation performed: (false || true) is true
Perform action:
> /and 2 10
.Operation performed: (false && true) is false
Perform action:
> /or 2 10
-Operation performed: (false || true) is true
Perform action:
> /and 2 11
/Operation performed: (false && false) is false
Perform action:
> /or 2 11
/Operation performed: (false || false) is false
Perform action:
> /and 3 0
.Operation performed: (true && false) is false
Perform action:

> /or 3 0
-Operation performed: (true || false) is true
Perform action:
> /and 3 1
.Operation performed: (true && false) is false
Perform action:

> /or 3 1
-Operation performed: (true || false) is true
Perform action:
> /and 3 2
.Operation performed: (true && false) is false
Perform action:

> /or 3 2
-Operation performed: (true || false) is true
Perform action:
> /and 3 3
,Operation performed: (true && true) is true
Perform action:

> /or 3 3
,Operation performed: (true || true) is true
Perform action:
> /and 3 4
,Operation performed: (true && true) is true
Perform action:

> /or 3 4
,Operation performed: (true || true) is true
Perform action:
> /and 3 5
,Operation performed: (true && true) is true
Perform action:

> /or 3 5
,Operation performed: (true || true) is true
Perform action:
> /and 3 6
.Operation performed: (true && false) is false
Perform action:

> /or 3 6
-Operation performed: (true || false) is true
Perform action:
> /and 3 7
,Operation performed: (true && true) is true
Perform action:

> /or 3 7
,Operation performed: (true || true) is true
Perform action:
> /and 3 8
.Operation performed: (true && false) is false
Perform action:

> /or 3 8
-Operation performed: (true || false) is true
Perform action:
> /and 3 9
,Operation performed: (true && true) is true
Perform action:

> /or 3 9
,Operation performed: (true || true) is true
Perform action:
> /and 3 10
,Operation performed: (true && true) is true
Perform action:
> /or 3 10
,Operation performed: (true || true) is true
Perform action:
> /and 3 11
.Operation performed: (true && false) is false
Perform action:
> /or 3 11
-Operation performed: (true || false) is true
Perform action:
> /and 4 0
.Operation performed: (true && false) is false
Perform action:

> /or 4 0
-Operation performed: (true || false) is true
Perform action:
> /and 4 1
.Operation performed: (true && false) is false
Perform action:

> /or 4 1
-Operation performed: (true || false) is true
Perform action:
> /and 4 2
.Operation performed: (true && false) is false
Perform action:

> /or 4 2
-Operation performed: (true || false) is true
Perform action:
> /and 4 3
,Operation performed: (true && true) is true
Perform action:

> /or 4 3
,Operation performed: (true || true) is true
Perform action:
> /and 4 4
,Operation performed: (true && true) is true
Perform action:

> /or 4 4
,Operation performed: (true || true) is true
Perform action:
> /and 4 5
,Operation performed: (true && true) is true
Perform action:

> /or 4 5
,Operation performed: (true || true) is true
Perform action:
> /and 4 6
.Operation performed: (true && false) is false
Perform action:

> /or 4 6
-Operation performed: (true || false) is true
Perform action:
> /and 4 7
,Operation performed: (true && true) is true
Perform action:

> /or 4 7
,Operation performed: (true || true) is true
Perform action:
> /and 4 8
.Operation performed: (true && false) is false
Perform action:

> /or 4 8
-Operation performed: (true || false) is true
Perform action:
> /and 4 9
,Operation performed: (true && true) is true
Perform action:

> /or 4 9
,Operation performed: (true || true) is true
Perform action:
> /and 4 10
,Operation performed: (true && true) is true
Perform action:
> /or 4 10
,Operation performed: (true || true) is true
Perform action:
> /and 4 11
.Operation performed: (true && false) is false
Perform action:
> /or 4 11
-Operation performed: (true || false) is true
Perform action:
> /and 5 0
.Operation performed: (true && false) is false
Perform action:

> /or 5 0
-Operation performed: (true || false) is true
Perform action:
> /and 5 1
.Operation performed: (true && false) is false
Perform action:

> /or 5 1
-Operation performed: (true || false) is true
Perform action:
> /and 5 2
.Operation performed: (true && false) is false
Perform action:

> /or 5 2
-Operation performed: (true || false) is true
Perform action:
> /and 5 3
,Operation performed: (true && true) is true
Perform action:

> /or 5 3
,Operation performed: (true || true) is true
Perform action:
> /and 5 4
,Operation performed: (true && true) is true
Perform action:

> /or 5 4
,Operation performed: (true || true) is true
Perform action:
> /and 5 5
,Operation performed: (true && true) is true
Perform action:

> /or 5 5
,Operation performed: (true || true) is true
Perform action:
> /and 5 6
.Operation performed: (true && false) is false
Perform action:

> /or 5 6
-Operation performed: (true || false) is true
Perform action:
> /and 5 7
,Operation performed: (true && true) is true
Perform action:

> /or 5 7
,Operation performed: (true || true) is true
Perform action:
> /and 5 8
.Operation performed: (true && false) is false
Perform action:

> /or 5 8
-Operation performed: (true || false) is true
Perform action:
> /and 5 9
,Operation performed: (true && true) is true
Perform action:

> /or 5 9
,Operation performed: (true || true) is true
Perform action:
> /and 5 10
,Operation performed: (true && true) is true
Perform action:
> /or 5 10
,Operation performed: (true || true) is true
Perform action:
> /and 5 11
.Operation performed: (true && false) is false
Perform action:
> /or 5 11
-Operation performed: (true || false) is true
Perform action:
> /and 6 0
/Operation performed: (false && false) is false
Perform action:

> /or 6 0
/Operation performed: (false || false) is false
Perform action:
> /and 6 1
/Operation performed: (false && false) is false
Perform action:

> /or 6 1
/Operation performed: (false || false) is false
Perform action:
> /and 6 2
/Operation performed: (false && false) is false
Perform action:

> /or 6 2
/Operation performed: (false || false) is false
Perform action:
> /and 6 3
.Operation performed: (false && true) is false
Perform action:

> /or 6 3
-Operation performed: (false || true) is true
Perform action:
> /and 6 4
.Operation performed: (false && true) is false
Perform action:

> /or 6 4
-Operation performed: (false || true) is true
Perform action:
> /and 6 5
.Operation performed: (false && true) is false
Perform action:

> /or 6 5
-Operation performed: (false || true) is true
Perform action:
> /and 6 6
/Operation performed: (false && false) is false
Perform action:

> /or 6 6
/Operation performed: (false || false) is false
Perform action:
> /and 6 7
.Operation performed: (false && true) is false
Perform action:

> /or 6 7
-Operation performed: (false || true) is true
Perform action:
> /and 6 8
/Operation performed: (false && false) is false
Perform action:

> /or 6 8
/Operation performed: (false || false) is false
Perform action:
> /and 6 9
.Operation performed: (false && true) is false
Perform action:

> /or 6 9
-Operation performed: (false || true) is true
Perform action:
> /and 6 10
.Operation performed: (false && true) is false
Perform action:
> /or 6 10
-Operation performed: (false || true) is true
Perform action:
> /and 6 11
/Operation performed: (false && false) is false
Perform action:
> /or 6 11
/Operation performed: (false || false) is false
Perform action:
> /and 7 0
.Operation performed: (true && false) is false
Perform action:

> /or 7 0
-Operation performed: (true || false) is true
Perform action:
> /and 7 1
.Operation performed: (true && false) is false
Perform action:

> /or 7 1
-Operation performed: (true || false) is true
Perform action:
> /and 7 2
.Operation performed: (true && false) is false
Perform action:

> /or 7 2
-Operation performed: (true || false) is true
Perform action:
> /and 7 3
,Operation performed: (true && true) is true
Perform action:

> /or 7 3
,Operation performed: (true || true) is true
Perform action:
> /and 7 4
,Operation performed: (true && true) is true
Perform action:

> /or 7 4
,Operation performed: (true || true) is true
Perform action:
> /and 7 5
,Operation performed: (true && true) is true
Perform action:

> /or 7 5
,Operation performed: (true || true) is true
Perform action:
> /and 7 6
.Operation performed: (true && false) is false
Perform action:

> /or 7 6
-Operation performed: (true || false) is true
Perform action:
> /and 7 7
,Operation performed: (true && true) is true
Perform action:

> /or 7 7
,Operation performed: (true || true) is true
Perform action:
> /and 7 8
.Operation performed: (true && false) is false
Perform action:

> /or 7 8
-Operation performed: (true || false) is true
Perform action:
> /and 7 9
,Operation performed: (true && true) is true
Perform action:

> /or 7 9
,Operation performed: (true || true) is true
Perform action:
> /and 7 10
,Operation performed: (true && true) is true
Perform action:
> /or 7 10
,Operation performed: (true || true) is true
Perform action:
> /and 7 11
.Operation performed: (true && false) is false
Perform action:
> /or 7 11
-Operation performed: (true || false) is true
Perform action:
> /and 8 0
/Operation performed: (false && false) is false
Perform action:

> /or 8 0
/Operation performed: (false || false) is false
Perform action:
> /and 8 1
/Operation performed: (false && false) is false
Perform action:

> /or 8 1
/Operation performed: (false || false) is false
Perform action:
> /and 8 2
/Operation performed: (false && false) is false
Perform action:

> /or 8 2
/Operation performed: (false || false) is false
Perform action:
> /and 8 3
.Operation performed: (false && true) is false
Perform action:

> /or 8 3
-Operation performed: (false || true) is true
Perform action:
> /and 8 4
.Operation performed: (false && true) is false
Perform action:

> /or 8 4
-Operation performed: (false || true) is true
Perform action:
> /and 8 5
.Operation performed: (false && true) is false
Perform action:

> /or 8 5
-Operation performed: (false || true) is true
Perform action:
> /and 8 6
/Operation performed: (false && false) is false
Perform action:

> /or 8 6
/Operation performed: (false || false) is false
Perform action:
> /and 8 7
.Operation performed: (false && true) is false
Perform action:

> /or 8 7
-Operation performed: (false || true) is true
Perform action:
> /and 8 8
/Operation performed: (false && false) is false
Perform action:

> /or 8 8
/Operation performed: (false || false) is false
Perform action:
> /and 8 9
.Operation performed: (false && true) is false
Perform action:

> /or 8 9
-Operation performed: (false || true) is true
Perform action:
> /and 8 10
.Operation performed: (false && true) is false
Perform action:
> /or 8 10
-Operation performed: (false || true) is true
Perform action:
> /and 8 11
/Operation performed: (false && false) is false
Perform action:
> /or 8 11
/Operation performed: (false || false) is false
Perform action:
> /and 9 0
.Operation performed: (true && false) is false
Perform action:

> /or 9 0
-Operation performed: (true || false) is true
Perform action:
> /and 9 1
.Operation performed: (true && false) is false
Perform action:

> /or 9 1
-Operation performed: (true || false) is true
Perform action:
> /and 9 2
.Operation performed: (true && false) is false
Perform action:

> /or 9 2
-Operation performed: (true || false) is true
Perform action:
> /and 9 3
,Operation performed: (true && true) is true
Perform action:

> /or 9 3
,Operation performed: (true || true) is true
Perform action:
> /and 9 4
,Operation performed: (true && true) is true
Perform action:

> /or 9 4
,Operation performed: (true || true) is true
Perform action:
> /and 9 5
,Operation performed: (true && true) is true
Perform action:

> /or 9 5
,Operation performed: (true || true) is true
Perform action:
> /and 9 6
.Operation performed: (true && false) is false
Perform action:

> /or 9 6
-Operation performed: (true || false) is true
Perform action:
> /and 9 7
,Operation performed: (true && true) is true
Perform action:

> /or 9 7
,Operation performed: (true || true) is true
Perform action:
> /and 9 8
.Operation performed: (true && false) is false
Perform action:

> /or 9 8
-Operation performed: (true || false) is true
Perform action:
> /and 9 9
,Operation performed: (true && true) is true
Perform action:

> /or 9 9
,Operation performed: (true || true) is true
Perform action:
> /and 9 10
,Operation performed: (true && true) is true
Perform action:
> /or 9 10
,Operation performed: (true || true) is true
Perform action:
> /and 9 11
.Operation performed: (true && false) is false
Perform action:
> /or 9 11
-Operation performed: (true || false) is true
Perform action:
> /and 10 0
.Operation performed: (true && false) is false
Perform action:
> /or 10 0
-Operation performed: (true || false) is true
Perform action:
> /and 10 1
.Operation performed: (true && false) is false
Perform action:
> /or 10 1
-Operation performed: (true || false) is true
Perform action:
> /and 10 2
.Operation performed: (true && false) is false
Perform action:
> /or 10 2
-Operation performed: (true || false) is true
Perform action:
> /and 10 3
,Operation performed: (true && true) is true
Perform action:
> /or 10 3
,Operation performed: (true || true) is true
Perform action:
> /and 10 4
,Operation performed: (true && true) is true
Perform action:
> /or 10 4
,Operation performed: (true || true) is true
Perform action:
> /and 10 5
,Operation performed: (true && true) is true
Perform action:
> /or 10 5
,Operation performed: (true || true) is true
Perform action:
> /and 10 6
.Operation performed: (true && false) is false
Perform action:
> /or 10 6
-Operation performed: (true || false) is true
Perform action:
> /and 10 7
,Operation performed: (true && true) is true
Perform action:
> /or 10 7
,Operation performed: (true || true) is true
Perform action:
> /and 10 8
.Operation performed: (true && false) is false
Perform action:
> /or 10 8
-Operation performed: (true || false) is true
Perform action:
> /and 10 9
,Operation performed: (true && true) is true
Perform action:
> /or 10 9
,Operation performed: (true || true) is true
Perform action:
> /and 10 10
,Operation performed: (true && true) is true
Perform action:
> /or 10 10
,Operation performed: (true || true) is true
Perform action:
> /and 10 11
.Operation performed: (true && false) is false
Perform action:
> /or 10 11
-Operation performed: (true || false) is true
Perform action:
> /and 11 0
/Operation performed: (false && false) is false
Perform action:
> /or 11 0
/Operation performed: (false || false) is false
Perform action:
> /and 11 1
/Operation performed: (false && false) is false
Perform action:
> /or 11 1
/Operation performed: (false || false) is false
Perform action:
> /and 11 2
/Operation performed: (false && false) is false
Perform action:
> /or 11 2
/Operation performed: (false || false) is false
Perform action:
> /and 11 3
.Operation performed: (false && true) is false
Perform action:
> /or 11 3
-Operation performed: (false || true) is true
Perform action:
> /and 11 4
.Operation performed: (false && true) is false
Perform action:
> /or 11 4
-Operation performed: (false || true) is true
Perform action:
> /and 11 5
.Operation performed: (false && true) is false
Perform action:
> /or 11 5
-Operation performed: (false || true) is true
Perform action:
> /and 11 6
/Operation performed: (false && false) is false
Perform action:
> /or 11 6
/Operation performed: (false || false) is false
Perform action:
> /and 11 7
.Operation performed: (false && true) is false
Perform action:
> /or 11 7
-Operation performed: (false || true) is true
Perform action:
> /and 11 8
/Operation performed: (false && false) is false
Perform action:
> /or 11 8
/Operation performed: (false || false) is false
Perform action:
> /and 11 9
.Operation performed: (false && true) is false
Perform action:
> /or 11 9
-Operation performed: (false || true) is true
Perform action:
> /and 11 10
.Operation performed: (false && true) is false
Perform action:
> /or 11 10
-Operation performed: (false || true) is true
Perform action:
> /and 11 11
/Operation performed: (false && false) is false
Perform action:
> /or 11 11
/Operation performed: (false || false) is false
Perform action:

> /flip 0
Element on 0 position flipped
Perform action:
> /print 0
Element on 0 position is true
Perform action:

> /flip 1
Element on 1 position flipped
Perform action:
> /print 1
Element on 1 position is true
Perform action:

> /flip 2
Element on 2 position flipped
Perform action:
> /print 2
Element on 2 position is true
Perform action:

> /flip 3
Element on 3 position flipped
Perform action:
> /print 3
 Element on 3 position is false
Perform action:

> /flip 4
Element on 4 position flipped
Perform action:
> /print 4
 Element on 4 position is false
Perform action:

> /flip 5
Element on 5 position flipped
Perform action:
> /print 5
 Element on 5 position is false
Perform action:

> /flip 6
Element on 6 position flipped
Perform action:
> /print 6
Element on 6 position is true
Perform action:

> /flip 7
Element on 7 position flipped
Perform action:
> /print 7
 Element on 7 position is false
Perform action:

> /flip 8
Element on 8 position flipped
Perform action:
> /print 8
Element on 8 position is true
Perform action:

> /flip 9
Element on 9 position flipped
Perform action:
> /print 9
 Element on 9 position is false
Perform action:
> /flip 10
 Element on 10 position flipped
Perform action:
> /print 10
!Element on 10 position is false
Perform action:
> /flip 11
 Element on 11 position flipped
Perform action:
> /print 11
 Element on 11 position is true
Perform action:
[1;31m
Start test 40 (105)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /logShift 0
Elements shifted by 0
Perform action:
> /printAll asList
List of elements:
6[true, false, true, false, false, true, true, false]
Perform action:
> /logShift 1
Elements shifted by 1
Perform action:
> /printAll asList
List of elements:
6[false, true, false, true, false, false, true, true]
Perform action:
> /logShift 2
Elements shifted by 2
Perform action:
> /printAll asList
List of elements:
6[true, true, false, true, false, true, false, false]
Perform action:
> /logShift 3
Elements shifted by 3
Perform action:
> /printAll asList
List of elements:
6[true, false, false, true, true, false, true, false]
Perform action:
> /logShift 4
Elements shifted by 4
Perform action:
> /printAll asList
List of elements:
6[true, false, true, false, true, false, false, true]
Perform action:
> /logShift 5
Elements shifted by 5
Perform action:
> /printAll asList
List of elements:
6[false, true, false, false, true, true, false, true]
Perform action:
> /logShift 6
Elements shifted by 6
Perform action:
> /printAll asList
List of elements:
6[false, false, true, true, false, true, false, true]
Perform action:
> /logShift 7
Elements shifted by 7
Perform action:
> /printAll asList
List of elements:
6[false, true, true, false, true, false, true, false]
Perform action:
> /logShift 8
Elements shifted by 8
Perform action:
> /printAll asList
List of elements:
6[false, true, true, false, true, false, true, false]
Perform action:
> /logShift 9
Elements shifted by 9
Perform action:
> /printAll asList
List of elements:
6[false, false, true, true, false, true, false, true]
Perform action:
[1;31m
Start test 41 (106)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /logShift 0
Elements shifted by 0
Perform action:
> /printAll asList
List of elements:
B[true, true, true, false, true, false, true, true, false, false]
Perform action:
> /logShift 1
Elements shifted by 1
Perform action:
> /printAll asList
List of elements:
B[false, true, true, true, false, true, false, true, true, false]
Perform action:
> /logShift 2
Elements shifted by 2
Perform action:
> /printAll asList
List of elements:
B[true, false, false, true, true, true, false, true, false, true]
Perform action:
> /logShift 3
Elements shifted by 3
Perform action:
> /printAll asList
List of elements:
B[true, false, true, true, false, false, true, true, true, false]
Perform action:
> /logShift 4
Elements shifted by 4
Perform action:
> /printAll asList
List of elements:
B[true, true, true, false, true, false, true, true, false, false]
Perform action:
> /logShift 5
Elements shifted by 5
Perform action:
> /printAll asList
List of elements:
B[false, true, true, false, false, true, true, true, false, true]
Perform action:
> /logShift 6
Elements shifted by 6
Perform action:
> /printAll asList
List of elements:
B[false, true, true, true, false, true, false, true, true, false]
Perform action:
> /logShift 7
Elements shifted by 7
Perform action:
> /printAll asList
List of elements:
B[true, false, true, false, true, true, false, false, true, true]
Perform action:
> /logShift 8
Elements shifted by 8
Perform action:
> /printAll asList
List of elements:
B[true, false, true, true, false, false, true, true, true, false]
Perform action:
> /logShift 9
Elements shifted by 9
Perform action:
> /printAll asList
List of elements:
B[false, true, true, false, false, true, true, true, false, true]
Perform action:
[1;31m
Start test 42 (107)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /logShift 0
Elements shifted by 0
Perform action:
> /printAll asList
List of elements:
P[false, false, false, true, true, true, false, true, false, true, true, false]
Perform action:
> /logShift 1
Elements shifted by 1
Perform action:
> /printAll asList
List of elements:
P[false, false, false, false, true, true, true, false, true, false, true, true]
Perform action:
> /logShift 2
Elements shifted by 2
Perform action:
> /printAll asList
List of elements:
P[true, true, false, false, false, false, true, true, true, false, true, false]
Perform action:
> /logShift 3
Elements shifted by 3
Perform action:
> /printAll asList
List of elements:
P[false, true, false, true, true, false, false, false, false, true, true, true]
Perform action:
> /logShift 4
Elements shifted by 4
Perform action:
> /printAll asList
List of elements:
P[false, true, true, true, false, true, false, true, true, false, false, false]
Perform action:
> /logShift 5
Elements shifted by 5
Perform action:
> /printAll asList
List of elements:
P[true, true, false, false, false, false, true, true, true, false, true, false]
Perform action:
> /logShift 6
Elements shifted by 6
Perform action:
> /printAll asList
List of elements:
P[true, true, true, false, true, false, true, true, false, false, false, false]
Perform action:
> /logShift 7
Elements shifted by 7
Perform action:
> /printAll asList
List of elements:
P[false, true, true, false, false, false, false, true, true, true, false, true]
Perform action:
> /logShift 8
Elements shifted by 8
Perform action:
> /printAll asList
List of elements:
P[false, false, false, true, true, true, false, true, false, true, true, false]
Perform action:
> /logShift 9
Elements shifted by 9
Perform action:
> /printAll asList
List of elements:
P[true, true, true, false, true, false, true, true, false, false, false, false]
Perform action:
[1;31m
Start test 43 (108)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add Lorem
Element Lorem added
Perform action:
> /add ipsuM
Element ipsuM added
Perform action:

> /join _
Joined string: Lorem_ipsuM
Perform action:

> /join ,
Joined string: Lorem,ipsuM
Perform action:
> /join DOT
Joined string: LoremDOTipsuM
Perform action:
> /swapCase 0
)"Lorem" string with swapped case: lOREM
Perform action:
> /swapCase 1
)"ipsuM" string with swapped case: IPSUm
Perform action:
[1;31m
Start test 44 (109)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add doLoR
Element doLoR added
Perform action:
> /add sIT
Element sIT added
Perform action:
> /add AMet
Element AMet added
Perform action:

> /join _
Joined string: doLoR_sIT_AMet
Perform action:

> /join ,
Joined string: doLoR,sIT,AMet
Perform action:
> /join DOT
"Joined string: doLoRDOTsITDOTAMet
Perform action:
> /swapCase 0
)"doLoR" string with swapped case: DOlOr
Perform action:
> /swapCase 1
%"sIT" string with swapped case: Sit
Perform action:
> /swapCase 2
'"AMet" string with swapped case: amET
Perform action:
[1;31m
Start test 45 (110)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add coNseCTetUr
Element coNseCTetUr added
Perform action:
> /add AdiPisCIng
Element AdiPisCIng added
Perform action:
> /add ElIT
Element ElIT added
Perform action:
> /add sed
Element sed added
Perform action:

> /join _
/Joined string: coNseCTetUr_AdiPisCIng_ElIT_sed
Perform action:

> /join ,
/Joined string: coNseCTetUr,AdiPisCIng,ElIT,sed
Perform action:
> /join DOT
5Joined string: coNseCTetUrDOTAdiPisCIngDOTElITDOTsed
Perform action:
> /swapCase 0
5"coNseCTetUr" string with swapped case: COnSEctETuR
Perform action:
> /swapCase 1
3"AdiPisCIng" string with swapped case: aDIpISciNG
Perform action:
> /swapCase 2
'"ElIT" string with swapped case: eLit
Perform action:
> /swapCase 3
%"sed" string with swapped case: SED
Perform action:
[1;31m
Start test 46 (111)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:
	> /add 4
Element 4 added
Perform action:
> /factorial 0
Calculation performed: 2! = 2
Perform action:
> /factorial 1
Calculation performed: 4! = 24
Perform action:
> /average
Average of all elements: 3
Perform action:
[1;31m
Start test 47 (112)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 6
Element 6 added
Perform action:
	> /add 1
Element 1 added
Perform action:
	> /add 5
Element 5 added
Perform action:
> /factorial 0
 Calculation performed: 6! = 720
Perform action:
> /factorial 1
Calculation performed: 1! = 1
Perform action:
> /factorial 2
 Calculation performed: 5! = 120
Perform action:
> /average
Average of all elements: 4
Perform action:
[1;31m
Start test 48 (113)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 0
Element 0 added
Perform action:
	> /add 1
Element 1 added
Perform action:
	> /add 0
Element 0 added
Perform action:
	> /add 3
Element 3 added
Perform action:
> /factorial 0
Calculation performed: 0! = 1
Perform action:
> /factorial 1
Calculation performed: 1! = 1
Perform action:
> /factorial 2
Calculation performed: 0! = 1
Perform action:
> /factorial 3
Calculation performed: 3! = 6
Perform action:
> /average
Average of all elements: 1
Perform action:
[1;31m
Start test 49 (114)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /add 2147483647
Element 2147483647 added
Perform action:
> /add 2147483647
Element 2147483647 added
Perform action:
> /sum 0 1
<Calculation performed: 2147483647 + 2147483647 = 4294967294
Perform action:
> /subtract 0 1
3Calculation performed: 2147483647 - 2147483647 = 0
Perform action:
> /multiply 0 1
ECalculation performed: 2147483647 * 2147483647 = 4611686014132420609
Perform action:

> /sumAll
!Sum of all elements: 4294967294
Perform action:
> /average
$Average of all elements: 2147483647
Perform action:
[1;31m
Start test 50 (115)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /add -2147483647
Element -2147483647 added
Perform action:
> /add -2147483647
Element -2147483647 added
Perform action:
> /sum 0 1
?Calculation performed: -2147483647 + -2147483647 = -4294967294
Perform action:
> /subtract 0 1
5Calculation performed: -2147483647 - -2147483647 = 0
Perform action:
> /multiply 0 1
GCalculation performed: -2147483647 * -2147483647 = 4611686014132420609
Perform action:

> /sumAll
"Sum of all elements: -4294967294
Perform action:
> /average
%Average of all elements: -2147483647
Perform action:
[1;31m
Start test 51 (116)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /add -2147483647
Element -2147483647 added
Perform action:
> /add 2147483647
Element 2147483647 added
Perform action:
> /sum 0 1
4Calculation performed: -2147483647 + 2147483647 = 0
Perform action:
> /subtract 0 1
>Calculation performed: -2147483647 - 2147483647 = -4294967294
Perform action:
> /multiply 0 1
GCalculation performed: -2147483647 * 2147483647 = -4611686014132420609
Perform action:

> /sumAll
Sum of all elements: 0
Perform action:
> /average
Average of all elements: 0
Perform action:
[1;31m
Start test 52 (117)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /add 2147483647
Element 2147483647 added
Perform action:
> /add -2147483647
Element -2147483647 added
Perform action:
> /sum 0 1
4Calculation performed: 2147483647 + -2147483647 = 0
Perform action:
> /subtract 0 1
=Calculation performed: 2147483647 - -2147483647 = 4294967294
Perform action:
> /multiply 0 1
GCalculation performed: 2147483647 * -2147483647 = -4611686014132420609
Perform action:

> /sumAll
Sum of all elements: 0
Perform action:
> /average
Average of all elements: 0
Perform action:
[1;31m
Start test 53 (118)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 9
Element 9 added
Perform action:

> /add 19
Element 19 added
Perform action:
> /pow 0 1
4Calculation performed: 9 ^ 19 = 1350851717672992089
Perform action:
[1;31m
Start test 54 (119)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 6
Element 6 added
Perform action:
> /add 1000000
Element 1000000 added
Perform action:
> /divide 0 1
.Calculation performed: 6 / 1000000 = 0.000006
Perform action:
[1;31m
Start test 55 (120)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /add 1000001
Element 1000001 added
Perform action:
> /add 1000000
Element 1000000 added
Perform action:
> /divide 0 1
4Calculation performed: 1000001 / 1000000 = 1.000001
Perform action:
[1;31m
Start test 56 (121)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 8
Element 8 added
Perform action:

> /add -2
Element -2 added
Perform action:
> /pow 0 1
)Calculation performed: 8 ^ -2 = 0.015625
Perform action:
[1;31m
Start test 57 (122)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 1
Element 1 added
Perform action:
	> /add 1
Element 1 added
Perform action:
	> /add 1
Element 1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /average
Average of all elements: 1.25
Perform action:
[1;31m
Start test 1 (123)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 4
Incorrect command
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit

> integer
Incorrect command
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> -2
Incorrect command
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
[1;31m
Start test 2 (124)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> hey?
No such command!
Perform action:
	> /smile
No such command!
Perform action:
> /draw line
No such command!
Perform action:
> add true
No such command!
Perform action:
> /add
Incorrect amount of arguments
Perform action:
> /compare 2
Incorrect amount of arguments
Perform action:
[1;31m
Start test 3 (125)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> hey?
No such command!
Perform action:
	> /smile
No such command!
Perform action:
> /draw line
No such command!
Perform action:
	> add 42
No such command!
Perform action:
> /add
Incorrect amount of arguments
Perform action:
> /compare 2
Incorrect amount of arguments
Perform action:
[1;31m
Start test 4 (126)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> hey?
No such command!
Perform action:
	> /smile
No such command!
Perform action:
> /draw line
No such command!
Perform action:

> add tmp
No such command!
Perform action:
> /add
Incorrect amount of arguments
Perform action:
> /compare 2
Incorrect amount of arguments
Perform action:
[1;31m
Start test 5 (127)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /remove 5
Index out of bounds!
Perform action:
> /print 5
Index out of bounds!
Perform action:
> /replace 5 true
Index out of bounds!
Perform action:
> /equals 5 2
Index out of bounds!
Perform action:
> /compare 5 2
Index out of bounds!
Perform action:
> /equals 2 5
Index out of bounds!
Perform action:
> /compare 2 5
Index out of bounds!
Perform action:

> /flip 5
Index out of bounds!
Perform action:
> /and 5 2
Index out of bounds!
Perform action:
> /and 2 5
Index out of bounds!
Perform action:

> /or 5 2
Index out of bounds!
Perform action:

> /or 2 5
Index out of bounds!
Perform action:
[1;31m
Start test 6 (128)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /remove 5
Index out of bounds!
Perform action:
> /print 5
Index out of bounds!
Perform action:
> /replace 5 42
Index out of bounds!
Perform action:
> /equals 5 2
Index out of bounds!
Perform action:
> /compare 5 2
Index out of bounds!
Perform action:
> /equals 2 5
Index out of bounds!
Perform action:
> /compare 2 5
Index out of bounds!
Perform action:
> /sum 5 2
Index out of bounds!
Perform action:
> /sum 2 5
Index out of bounds!
Perform action:
> /subtract 5 2
Index out of bounds!
Perform action:
> /subtract 2 5
Index out of bounds!
Perform action:
> /multiply 5 2
Index out of bounds!
Perform action:
> /multiply 2 5
Index out of bounds!
Perform action:
> /divide 5 2
Index out of bounds!
Perform action:
> /divide 2 5
Index out of bounds!
Perform action:
> /pow 5 2
Index out of bounds!
Perform action:
> /pow 2 5
Index out of bounds!
Perform action:
> /factorial 5
Index out of bounds!
Perform action:
[1;31m
Start test 7 (129)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /remove 5
Index out of bounds!
Perform action:
> /print 5
Index out of bounds!
Perform action:
> /replace 5 tmp
Index out of bounds!
Perform action:
> /equals 5 2
Index out of bounds!
Perform action:
> /compare 5 2
Index out of bounds!
Perform action:
> /equals 2 5
Index out of bounds!
Perform action:
> /compare 2 5
Index out of bounds!
Perform action:
> /concat 5 2
Index out of bounds!
Perform action:
> /concat 2 5
Index out of bounds!
Perform action:
> /swapCase 5
Index out of bounds!
Perform action:
> /upper 5
Index out of bounds!
Perform action:
> /lower 5
Index out of bounds!
Perform action:
> /reverse 5
Index out of bounds!
Perform action:
> /length 5
Index out of bounds!
Perform action:
[1;31m
Start test 8 (130)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /remove A
2Some arguments can't be parsed!0.827261490134096
Perform action:
> /print A
3Some arguments can't be parsed!0.3707416955698767
Perform action:
> /replace A true
4Some arguments can't be parsed!0.18623864242850896
Perform action:
> /equals A B
4Some arguments can't be parsed!0.36605239808002277
Perform action:
> /compare A B
2Some arguments can't be parsed!0.485423496901477
Perform action:

> /flip A
3Some arguments can't be parsed!0.7712060912001989
Perform action:
> /and A 2
3Some arguments can't be parsed!0.5797382935112034
Perform action:
> /and 2 A
3Some arguments can't be parsed!0.1155531899693667
Perform action:

> /or A 2
3Some arguments can't be parsed!0.8879602328252336
Perform action:

> /or 2 A
3Some arguments can't be parsed!0.6272235107383728
Perform action:
> /logShift A
3Some arguments can't be parsed!0.4165944715290941
Perform action:
[1;31m
Start test 9 (131)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /remove A
3Some arguments can't be parsed!0.7901943745918729
Perform action:
> /print A
3Some arguments can't be parsed!0.5788798367046016
Perform action:
> /replace A 42
4Some arguments can't be parsed!0.39878493633984113
Perform action:
> /equals A B
3Some arguments can't be parsed!0.8734388397710743
Perform action:
> /compare A B
3Some arguments can't be parsed!0.5328244621923579
Perform action:
	> /add A
2Some arguments can't be parsed!0.877361122109655
Perform action:
> /replace 2 A
3Some arguments can't be parsed!0.9672454163776696
Perform action:
> /replaceAll 2 A
4Some arguments can't be parsed!0.20085110489987712
Perform action:
> /replaceAll A 2
4Some arguments can't be parsed!0.11822062099766872
Perform action:
> /index A
5Some arguments can't be parsed!0.049856223039899894
Perform action:
> /count A
3Some arguments can't be parsed!0.7268893376405284
Perform action:
> /sum 2 A
3Some arguments can't be parsed!0.6823332096238407
Perform action:
> /sum A 2
5Some arguments can't be parsed!0.057023605191651505
Perform action:
> /subtract 2 A
4Some arguments can't be parsed!0.23413620339270802
Perform action:
> /subtract A 2
3Some arguments can't be parsed!0.6036169001820829
Perform action:
> /multiply 2 A
4Some arguments can't be parsed!0.37118146691892295
Perform action:
> /multiply A 2
3Some arguments can't be parsed!0.7974022872277226
Perform action:
> /divide 2 A
3Some arguments can't be parsed!0.8129414533439959
Perform action:
> /divide A 2
3Some arguments can't be parsed!0.2709238570867074
Perform action:
> /pow 2 A
3Some arguments can't be parsed!0.6139539825091993
Perform action:
> /pow A 2
4Some arguments can't be parsed!0.20331154309649935
Perform action:
> /factorial A
3Some arguments can't be parsed!0.9085323222340407
Perform action:
[1;31m
Start test 10 (132)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /remove A
3Some arguments can't be parsed!0.5647919271093637
Perform action:
> /print A
3Some arguments can't be parsed!0.6709888137714541
Perform action:
> /replace A tmp
2Some arguments can't be parsed!0.672777039336673
Perform action:
> /equals A B
3Some arguments can't be parsed!0.5493178835904399
Perform action:
> /compare A B
3Some arguments can't be parsed!0.9868026790095435
Perform action:
> /concat 2 A
3Some arguments can't be parsed!0.4524358824360093
Perform action:
> /concat A 2
4Some arguments can't be parsed!0.10046130684438515
Perform action:
> /swapCase A
3Some arguments can't be parsed!0.8458735581299064
Perform action:
> /upper A
4Some arguments can't be parsed!0.22873295851761155
Perform action:
> /lower A
3Some arguments can't be parsed!0.5025236043824398
Perform action:
> /reverse A
3Some arguments can't be parsed!0.3858355111558376
Perform action:
> /length A
4Some arguments can't be parsed!0.20604134124573392
Perform action:
[1;31m
Start test 11 (133)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /getRandom
!There are no elements memorized
Perform action:
[1;31m
Start test 12 (134)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /getRandom
!There are no elements memorized
Perform action:
[1;31m
Start test 13 (135)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /getRandom
!There are no elements memorized
Perform action:
[1;31m
Start test 14 (136)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 1
Element 1 added
Perform action:
	> /add 0
Element 0 added
Perform action:
> /divide 0 1
Division by zero
Perform action:
[1;31m
Start test 15 (137)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add false
Element false added
Perform action:
> /add true
Element true added
Perform action:
> /readFile notfound.txt
File not found!
Perform action:
[1;31m
Start test 16 (138)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 2
Element 2 added
Perform action:

> /add -1
Element -1 added
Perform action:

> /add -1
Element -1 added
Perform action:
	> /add 2
Element 2 added
Perform action:
> /readFile notfound.txt
File not found!
Perform action:
[1;31m
Start test 17 (139)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsATruth
Element CakeIsATruth added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /readFile notfound.txt
File not found!
Perform action:
[1;31m
Start test 18 (140)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /regex ())
"Incorrect regex pattern provided
Perform action:
[1;31m
Start test 19 (141)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /add true
Element true added
Perform action:
> /index false
There is no such element
Perform action:
> /sort up
?Incorrect argument, possible arguments: ascending, descending
Perform action:
> /printAll somehow
EIncorrect argument, possible arguments: asList, lineByLine, oneLine
Perform action:
[1;31m
Start test 20 (142)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
	> /add 1
Element 1 added
Perform action:
	> /add 1
Element 1 added
Perform action:
	> /add 1
Element 1 added
Perform action:
	> /add 1
Element 1 added
Perform action:
> /index 42
There is no such element
Perform action:
> /sort up
?Incorrect argument, possible arguments: ascending, descending
Perform action:
> /printAll somehow
EIncorrect argument, possible arguments: asList, lineByLine, oneLine
Perform action:
[1;31m
Start test 21 (143)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /add CakeIsALie
Element CakeIsALie added
Perform action:
> /index CakeIsATruth
There is no such element
Perform action:
> /sort up
?Incorrect argument, possible arguments: ascending, descending
Perform action:
> /printAll somehow
EIncorrect argument, possible arguments: asList, lineByLine, oneLine
Perform action:
[1;31m
Start test 22 (144)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /frequency
There are no elements
Perform action:
[1;31m
Start test 23 (145)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:
> /frequency
There are no elements
Perform action:
[1;31m
Start test 24 (146)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /frequency
There are no elements
Perform action:
[1;31m
Start test 25 (147)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 1
Perform action:
> /convertTo number
No data memorized
Perform action:
	> /morse
No data memorized
Perform action:
> /add true
Element true added
Perform action:
> /add false
Element false added
Perform action:
> /add notTrue
2Some arguments can't be parsed!0.852085201455983
Perform action:
> /convertTo something
8Incorrect argument, possible arguments: string, number
Perform action:
[1;31m
Start test 26 (148)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 3
Perform action:
> /regex .+
0There are no strings that match provided regex
Perform action:
> /add apple
Element apple added
Perform action:
> /add grape
Element grape added
Perform action:
> /regex $.^
0There are no strings that match provided regex
Perform action:
[1;31m
Start test 27 (149)[0m
Welcome to Data Memory!
Possible actions:
1. Memorize booleans
2. Memorize numbers
3. Memorize words
	0. Quit
> 2
Perform action:

> /add -1
Element -1 added
Perform action:
> /factorial 0
'Calculation performed: -1! = undefined
Perform action:
